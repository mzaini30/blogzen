{"judul":"Memperbarui generator website ini","deskripsi":"Sekarang, pakai JavaScript!","isi":"Kalau di [generator sebelumnya](/sistem-di-balik-blog-ini), aku menggunakan Python untuk mengolah konten blog ini yang berupa:\n\n1. Clone `index.html`\n2. Generate `sitemap.xml`\n3. Membuat JSON tiap konten\n\nKemudian, aku refaktori kodenya ke bahasa JavaScript karena pengennya sih [repositori blog ini](https://github.com/mzaini30/blogzen) full menggunakan Javascript dan juga, kalau aku menggunakan Javascript, lebih mudah maintenance-nya karena APInya sudah banyak aku tau dan karena sintaksnya C-like, enak buat copas kode. Hehehhehe... Kalau aku pakai Python, susah copasnya karena bakalan banyak mencet tab. Hehehhee... Oke, langsung kita bahas aja.\n\n## Tentang Clone `index.html`\n\nClone `index.html` berfungsi untuk menyalin file `index.html` menjadi slugnya masing-masing konten. Misalnya aja, aku punya konten-konten yang memiliki slug: \n\n1. hello-world\n2. makan-nasi-enak\n3. coba-sekarang\n\nMaka, script akan menyalin `index.html` dan membuat file-file:\n\n1. hello-world.html\n2. makan-nasi-enak.html\n3. coba-sekarang.html\n\nNamun, sebenarnya sih aku dah nyaman sama JavaScript dibandingkan bahasa lainnya. Ada juga pernah aku mencoba untuk mengubah ketiga script itu ke dalam bahasa Go, tapi aku kesulitan mengubahnya.\n\n## Tentang generate sitemap\n\n[Sitemap](/sitemap.xml) merupakan file yang sangat penting bagi sebuah website. Karena, dengan file ini, mesin pencari Google akan bisa merayapi website kita. Kok bisa? Karena file sitemap ini berisi kumpulan link di website kita. Maka, Google akan mudah merayapi website kita karena tinggal mengunjungi link-link yang ada di list di dalam file sitemap itu.\n\nMaka, aku pun akhirnya membuat script JavaScript untuk membuat file sitemap secara otomatis berdasarkan semua postingan yang sudah kubuat.\n\n## Tentang Clone JSON\n\nDatabase di blog ini awalnya hanya berupa [satu file](/db.json). Dan tentu saja ukurannya akan terus bertambah seiring dengan jumlah postingan di blog ini. Maka, bukan sesuatu yang efektif jika setiap kali kita membuka suatu halaman di blog ini, menembak satu file tersebut (yang sangat besar size-nya) dan kemudian ketika berganti halaman, menembak file itu lagi. Jadi, aku buat script untuk memecah satu file JSON itu menjadi banyak file JSON sesuai dengan jumlah postingan di blog ini. Sehingga, muat halaman akan lebih cepat karena yang diload hanya JSON yang sesuai dengan halaman yang sedang dibuka (nggak sampai 1 kb JSONnya).\n\n## Tentang callback hell di JavaScript\n\nSalah satu yang menjadi tantangan di pemrograman berbasis bahasa JavaScript adalah tentang callback hell seperti ini:\n\n```javascript\nfetch(\"situs.com\").then(x => x.json()).then(x => {\n console.log(x)\n fetch(\"halo.com\").then(x => x.json()).then(x => {\n  console.log(x)\n })\n})\n```\n\nCallback dalam JavaScript ditampakkan dari fungsi setelah tulisan `.then`. Nah, kalau kita lihat dari kode di atas, maka, callbacknya berada di sebuah fungsi setelah kita menjalankan perintah utama. Jadi, di dalam suatu statement, ada statement berikutnya, dia berbeda dengan bahasa lainnya yang menggunakan prinsip blocking IO:\n\n```python\nbaca = open(\"halo.txt\")\nprint(baca.read())\nbaca.close()\nbuka = open(\"hai.txt\", \"w\")\nbuka.write(\"halo\")\nbuka.close()\n```\n\nKalau di JavaScript, kita menggunakan [async/await](/contoh-async-await) untuk mengatasi permasalahan ini:\n\n```javascript\nhalo = async () => {\n x = await fetch(\"situs.com\")\n x = await x.json()\n console.log(x)\n x = await fetch(\"halo.com\")\n x = await x.json()\n console.log(x)\n}\nhalo()\n```\n\nJadinya lebih enak dimaintenance kan ya? Mirip kayak blocking IO. Itulah kelebihannya kalau menggunakan Javascript karena bahasa ini sering banget di-update. Dan akhirnya, fitur async/await ini membantu banget buat mengatasi permasalahan callback hell yang sudah lama menghantui para programmer JavaScript.\n\nDi script-script yang akan aku bahas di sini juga menggunakan teknik async/await.\n\n## clone-index.js\n\n```javascript\nprocess = require('process')\nfs = require('fs')\nutil = require('util')\nreadFile = util.promisify(fs.readFile)\nwriteFile = util.promisify(fs.writeFile)\ncopyFile = util.promisify(fs.copyFile)\nprocess.chdir('public')\nbuka = async () => {\n\tdata = await readFile('db.json', 'utf8')\n\tdata = JSON.parse(data)\n\tslug = []\n\tjudul = []\n\tdeskripsi = []\n\tfor (x of data.postingan){\n\t\tslug.push(x.slug)\n\t\tjudul.push(x.judul)\n\t\tdeskripsi.push(x.deskripsi)\n\t}\n\tfor (n in slug){\n\t\tbaca = await readFile('index.html', 'utf8')\n\t\tbaca = baca.replace(/(<title>)(.+)(<\\/title>)/g, `$1${judul[n]}$3`)\n\t\tbaca = baca.replace(/(<meta name=\"description\" content=\")(.+)(\">)/g, `$1${deskripsi[n].replace(/\"/g, '\\\\\"')}$3`)\n\t\twriteFile(`${slug[n]}.html`, baca)\n\t}\n\tfs.copyFile('index.html', '404.html', () => {})\n\tfs.copyFile('index.html', 'cari.html', () => {})\n}\nbuka()\n```\n\n## generate-sitemap.js\n\n```javascript\nprocess = require('process')\nfs = require('fs')\nutil = require('util')\nreadFile = util.promisify(fs.readFile)\nwriteFile = util.promisify(fs.writeFile)\nprocess.chdir('public')\nbaca = async () => {\n\tdata = await readFile('db.json', 'utf8')\n\tdata = JSON.parse(data)\n\tslug = []\n\tfor (x of data.postingan){\n\t\tslug.push(x.slug)\n\t}\n\tslug.reverse()\n\tsitemap = '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">'\n\tfor (x of slug){\n\t\tsitemap += `<url><loc>https://blogzen.js.org/${x}</loc></url>`\n\t}\n\tsitemap += '<url><loc>https://blogzen.js.org/</loc></url>'\n\tsitemap += '</urlset>'\n\twriteFile('sitemap.xml', sitemap)\n}\nbaca()\n```\n\n## pecah-json.js\n\n```javascript\nfs = require('fs')\nutil = require('util')\nprocess = require('process')\nwriteFile = util.promisify(fs.writeFile)\nreadFile = util.promisify(fs.readFile)\nprocess.chdir('public')\nbuka = async () => {\n\tdata = await readFile('db.json', 'utf8')\n\tdata = JSON.parse(data)\n\tslug = []\n\tjudul = []\n\tisi = []\n\tdeskripsi = []\n\tfor (x of data.postingan){\n\t\tslug.push(x.slug)\n\t\tjudul.push(x.judul)\n\t\tisi.push(x.isi)\n\t\tdeskripsi.push(x.deskripsi)\n\t}\n\tberanda = []\n\tfor (n in slug){\n\t\tberanda.push({\n\t\t\tslug: slug[n],\n\t\t\tjudul: judul[n],\n\t\t\tdeskripsi: deskripsi[n]\n\t\t})\n\t}\n\twriteFile('beranda.json', JSON.stringify(beranda))\n\tfor (n in slug){\n\t\tyang_diisi = {\n\t\t\tjudul: judul[n],\n\t\t\tdeskripsi: deskripsi[n],\n\t\t\tisi: isi[n]\n\t\t}\n\t\twriteFile(`${slug[n]}.json`, JSON.stringify(yang_diisi))\n\t}\n}\nbuka()\n```\n\n## Script Deploy di Github Action\n\nNggak mungkin kan aku menjalankan ketiga file itu sebelum menguploadnya ke Github. Maka, aku membuat [script](https://github.com/mzaini30/blogzen/blob/master/.github/workflows/blogzen.yml) untuk menjalankan ketiga script di atas secara otomatis _setiap kali aku meng-upload website ini ke Github_:\n\n```yaml\nname: blogzen\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  deploy:\n    runs-on: ubuntu-18.04\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: true\n          \n      - name: Setup Node\n        uses: actions/setup-node@v1\n        with:\n          node-version: \"14.x\"\n\n      - name: Cache dependencies Node\n        uses: actions/cache@v1\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: ${{ runner.os }}-node-\n\n      - name: Install\n        run: npm i\n\n      - name: Clone Index\n        run: node clone-index.js\n\n      - name: Generate sitemap\n        run: node generate-sitemap.js\n\n      - name: Pecah JSON\n        run: node pecah-json.js\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n```\n\nDari script di atas, ada beberapa step yang dijalankan secara otomatis saat Deploy:\n\n1. Check out\n2. Setup Node\n3. Cache dependencies Node\n4. Install\n5. Clone Index\n6. Generate sitemap\n7. Pecah JSON\n8. Deploy\n\nTahapan **checkout** artinya adalah menyalin repositori Github kita ke cachenya Github. Kemudian, **setup Node** untuk meng-install Node di cache tadi. Kemudian, **cache dependencies Node** itu artinya cek apakah dependencies Node yang diperlukan itu sudah terinstall di cache Github atau belum. Kalau pemakaian pertama, biasanya sih dia mendownload dulu berbagai dependencies Node yang diperlukan. Kalau sudah pemakaian ke sekian, dia tinggal mengambil cache dependencies Node aja.\n\nLalu, **install** berarti menjalankan `npm i`. Baru setelah itu kita menjalankan ketiga script yang sudah dibuat (**Clone index, generate sitemap, pecah JSON**). Baru, terakhir adalah **deploy** untuk menyalin folder `public` di cache Github ke dalam repositori Github kita di branch `gh-pages`."}