{"judul":"Memperbarui generator website ini","deskripsi":"Sekarang, pakai JavaScript!","isi":"Kalau di [generator sebelumnya](/sistem-di-balik-blog-ini), aku menggunakan Python untuk mengolah konten blog ini yang berupa:\n\n1. Clone `index.html`\n2. Generate `sitemap.xml`\n3. Membuat JSON tiap konten\n\n## Tentang Clone `index.html`\n\nClone `index.html` berfungsi untuk menyalin file `index.html` menjadi slugnya masing-masing konten. Misalnya aja, aku punya konten-konten yang memiliki slug: \n\n1. hello-world\n2. makan-nasi-enak\n3. coba-sekarang\n\nMaka, script akan menyalin `index.html` dan membuat file-file:\n\n1. hello-world.html\n2. makan-nasi-enak.html\n3. coba-sekarang.html\n\nNamun, sebenarnya sih aku dah nyaman sama JavaScript dibandingkan bahasa lainnya. Ada juga pernah aku mencoba untuk mengubah ketiga script itu ke dalam bahasa Go, tapi aku kesulitan mengubahnya.\n\n## Tentang callback hell di JavaScript\n\n## clone-index.js\n\n```javascript\nprocess = require('process')\nfs = require('fs')\nutil = require('util')\nreadFile = util.promisify(fs.readFile)\nwriteFile = util.promisify(fs.writeFile)\ncopyFile = util.promisify(fs.copyFile)\nprocess.chdir('public')\nbuka = async () => {\n\tdata = await readFile('db.json', 'utf8')\n\tdata = JSON.parse(data)\n\tslug = []\n\tjudul = []\n\tdeskripsi = []\n\tfor (x of data.postingan){\n\t\tslug.push(x.slug)\n\t\tjudul.push(x.judul)\n\t\tdeskripsi.push(x.deskripsi)\n\t}\n\tfor (n in slug){\n\t\tbaca = await readFile('index.html', 'utf8')\n\t\tbaca = baca.replace(/(<title>)(.+)(<\\/title>)/g, `$1${judul[n]}$3`)\n\t\tbaca = baca.replace(/(<meta name=\"description\" content=\")(.+)(\">)/g, `$1${deskripsi[n].replace(/\"/g, '\\\\\"')}$3`)\n\t\twriteFile(`${slug[n]}.html`, baca)\n\t}\n\tfs.copyFile('index.html', '404.html', () => {})\n\tfs.copyFile('index.html', 'cari.html', () => {})\n}\nbuka()\n```\n\n## generate-sitemap.js\n\n```javascript\nprocess = require('process')\nfs = require('fs')\nutil = require('util')\nreadFile = util.promisify(fs.readFile)\nwriteFile = util.promisify(fs.writeFile)\nprocess.chdir('public')\nbaca = async () => {\n\tdata = await readFile('db.json', 'utf8')\n\tdata = JSON.parse(data)\n\tslug = []\n\tfor (x of data.postingan){\n\t\tslug.push(x.slug)\n\t}\n\tslug.reverse()\n\tsitemap = '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">'\n\tfor (x of slug){\n\t\tsitemap += `<url><loc>https://blogzen.js.org/${x}</loc></url>`\n\t}\n\tsitemap += '<url><loc>https://blogzen.js.org/</loc></url>'\n\tsitemap += '</urlset>'\n\twriteFile('sitemap.xml', sitemap)\n}\nbaca()\n```\n\n## pecah-json.js\n\n```javascript\nfs = require('fs')\nutil = require('util')\nprocess = require('process')\nwriteFile = util.promisify(fs.writeFile)\nreadFile = util.promisify(fs.readFile)\nprocess.chdir('public')\nbuka = async () => {\n\tdata = await readFile('db.json', 'utf8')\n\tdata = JSON.parse(data)\n\tslug = []\n\tjudul = []\n\tisi = []\n\tdeskripsi = []\n\tfor (x of data.postingan){\n\t\tslug.push(x.slug)\n\t\tjudul.push(x.judul)\n\t\tisi.push(x.isi)\n\t\tdeskripsi.push(x.deskripsi)\n\t}\n\tberanda = []\n\tfor (n in slug){\n\t\tberanda.push({\n\t\t\tslug: slug[n],\n\t\t\tjudul: judul[n],\n\t\t\tdeskripsi: deskripsi[n]\n\t\t})\n\t}\n\twriteFile('beranda.json', JSON.stringify(beranda))\n\tfor (n in slug){\n\t\tyang_diisi = {\n\t\t\tjudul: judul[n],\n\t\t\tdeskripsi: deskripsi[n],\n\t\t\tisi: isi[n]\n\t\t}\n\t\twriteFile(`${slug[n]}.json`, JSON.stringify(yang_diisi))\n\t}\n}\nbuka()\n```"}