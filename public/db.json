{
  "postingan": [
    {
      "judul": "Cara menggunakan Svelte",
      "deskripsi": "Membuat website lebih cepat, ringan, dan menyenangkan",
      "isi": "## Instalasi\n\n```bash\nnpx degit sveltejs/template nama-proyekmu\n```\n\nKemudian, akan terdownlod tuh template Svelte di laptopmu. Nah, sekarang masuk ke `nama-proyekmu` dan jalankan:\n\n```bash\nnpm i\n```\n\nSetelah selesai instalasi, jalankan:\n\n```bash\nnpm run dev\n```\n\nNah, sekarang kamu buka `localhost:5000`. Lalu, akan muncul Hello World ala Svelte...",
      "slug": "cara-menggunakan-svelte",
      "id": 4
    },
    {
      "judul": "Sistem di balik blog ini",
      "deskripsi": "Svelte + Page JS + JSON Server",
      "isi": "## Filosofi\n\nAku mau website yang cepat. Dan kebetulan juga lagi suka sama Svelte karena mudah, sintaksnya enak dilihat, dan bundlenya pun kecil.\n\nTerus, untuk backendnya sih maunya ya nggak usah buat lagi sih. Capek. Akhirnya, aku teringat sama JSON Server. Jadi, aku cuma perlu menyiapkan satu file `db.json` yang kemudian akan diolah oleh JSON Server menggunakan semua metode HTTP Request. Jadi, aku nggak perlu coding sistemnya lagi. Tinggal HTTP Request aja dari linknya berdasarkan routes dan param yang sudah dijelaskan di docsnya.\n\n## Bedah sistem blog\n\nBlog ini kubagi jadi dua sistem yaitu ketika user membukanya dan ketika aku yang membukanya. Jadi, bisa dibilang _ketika user membukanya_ adalah sistem yang sudah di level _production_ sedangkan yang _ketika aku membukanya_ adalah level _development_.\n\nPerbedaannya bisa digambarkan seperti tabel di bawah ini:\n\n| Development | Production |\n|---|---|\n| Menggunakan Svelte + JSON Server | Menggunakan Svelte |\n| Akses baca tulis | Akses baca |\n| Browser + Node JS | Browser |\n\n## Mengapa menggunakan Svelte?\n\n> Svelte itu **compiler**!\n\nArtinya, Svelte itu berbeda dengan framework Javascript lainnya seperti Vue, React, dan Angular.\n\n## Perbedaan sistem blog ini dengan SSG\n\nStatic site generator (SSG) itu sistemnya adalah menggabungkan file-file layout dengan file-file Markdown menjadi sebuah website utuh.\n\nTentu sangat berbeda dengan blog ini. Kalau di blog ini, basisnya bukan sekumpulan file Markdown sebagaimana SSG tapi menggunakan database yang disediakan oleh JSON Server yang tugasnya adalah mengolah file `db.json` sesuai dengan API dari [JSON Server](https://github.com/typicode/json-server). Cara menggunakan JSON Server hanyalah dengan melakukan HTTP Request berdasarkan API yang tersedia. Misalnya aja aku punya file `db.json` yang isinya:\n\n```json\n{\n\t\"postingan\": [\n\t\t{\n\t\t\t\"id\": 1,\n\t\t\t\"judul\": \"Hello\",\n\t\t\t\"isi\": \"Hello world\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 2,\n\t\t\t\"judul\": \"Kedua\",\n\t\t\t\"isi\": \"Postingan kedua\"\n\t\t}\n\t]\n}\n```\n\nKalau di JSON Server, misalnya kita ingin menampilkan semua postingan, maka kita hanya perlu melakukan GET pada link `localhost:3000/postingan`. Kemudian, kalau kita ingin mendapatkan postingan pertama, kita cukup GET pada `localhost:3000/postingan/1`. Kalau kita ingin menambah artikel baru, cukup POST pada link `localhost:3000/postingan`. Kalau ingin menghapus postingan kedua, cukup DELETE pada `localhost:3000/postingan/2`. Mudah kan ya? Nah, itu semua aku jalankan di development karena memerlukan Node JS untuk menjalankan JSON Servernya.\n\n## Deploy dengan Github Action\n\nUntuk deployment blog ini, aku menggunakan Github Action, sebuah fitur dari Github untuk deployment. Tentu, membantu banget fitur ini.\n\n```yaml\nname: build svelte\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  deploy:\n    runs-on: ubuntu-18.04\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: true\n\n      - name: Setup Node\n        uses: actions/setup-node@v1\n        with:\n          node-version: \"14.x\"\n\n      - name: Setup Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.x\"\n\n      - name: Cache dependencies\n        uses: actions/cache@v1\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: ${{ runner.os }}-node-\n\n      - name: Clone Index\n        run: python clone-index.py\n\n      - name: Generate sitemap\n        run: python generate-sitemap.py\n\n      - name: Pecah JSON\n        run: python pecah-json.py\n\n      - name: Install\n        run: npm i\n\n      - name: Build\n        run: npm run build\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n```\n\n## Clone index\n\n```python\nimport os, json\n\nos.chdir(\"public\")\nwith open(\"db.json\") as f:\n data = json.load(f)\nslug = []\nfor x in data[\"postingan\"]:\n slug.append(x[\"slug\"])\nfor x in slug:\n os.system('cp index.html ' + x + '.html')\nos.system(\"cp index.html 404.html\")\nos.system(\"cp index.html cari.html\")\n```\n\n## Generate sitemap\n\n```python\nimport os, json\n\nos.chdir(\"public\")\nwith open(\"db.json\") as f:\n\tdata = json.load(f)\nslug = []\nfor x in data[\"postingan\"]:\n\tslug.append(x[\"slug\"])\nslug.reverse()\nsitemap = '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">'\nfor x in slug:\n\tsitemap += '<url><loc>https://blogzen.js.org/' + x + '</loc></url>'\nsitemap += '<url><loc>https://blogzen.js.org/</loc></url>'\nsitemap += '</urlset>'\nolah = open(\"sitemap.xml\", \"w\")\nolah.write(sitemap)\nolah.close()\n```\n\n## Pemecahan file JSON\n\n```python\nimport os, json\n\nos.chdir(\"public\")\nwith open(\"db.json\") as f:\n\tdata = json.load(f)\nslug = []\njudul = []\ndeskripsi = []\nisi = []\nfor x in data[\"postingan\"]:\n\tslug.append(x[\"slug\"])\n\tjudul.append(x[\"judul\"])\n\tdeskripsi.append(x[\"deskripsi\"])\n\tisi.append(x[\"isi\"])\n\nberanda = []\nfor (n, x) in enumerate(slug):\n\tberanda.append({\"slug\": x, \"judul\": judul[n], \"deskripsi\": deskripsi[n]})\nsimpan_beranda = open(\"beranda.json\", \"w\")\nsimpan_beranda.write(json.dumps(beranda))\nsimpan_beranda.close()\n\nfor (n, x) in enumerate(slug):\n\ttulis = open(x + '.json', 'w')\n\ttulis.write(json.dumps({\"judul\": judul[n], \"deskripsi\": deskripsi[n], \"isi\": isi[n]}))\n\ttulis.close()\n```",
      "slug": "sistem-di-balik-blog-ini",
      "id": 5
    },
    {
      "judul": "Router di Svelte JS",
      "deskripsi": "Mencoba menerapkan keunggulan SPA!",
      "isi": "Ada dua macam router yaitu yang menggunakan hash sama yang nggak. Kalau menggunakan hash, cocok pakai **svelte-spa-router**. Sedangkan kalau nggak pakai hash, pakai **page**.\n\n## Menggunakan Svelte SPA Router\n\nInstall dengan:\n\n```bash\nnpm i svelte-spa-router\n```\n\n## Menggunakan Page\n\nInstall dengan:\n\n```bash\nnpm i page\n```",
      "slug": "router-di-svelte-js",
      "id": 7
    },
    {
      "judul": "Svelte vs framework lainnya",
      "deskripsi": "Akankah Svelte menjadi pembuka era JavaScript baru?",
      "isi": "## Hasil benchmark\n\n![Bencmark](https://res.cloudinary.com/practicaldev/image/fetch/s--nj6O-fJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/DssqmdjVsAE8Il4%3Fformat%3Djpg%26name%3Dlarge)\n\n## Sintaks yang lebih sederhana\n\n### Svelte\n\n```html\n<script>\n    let count = 0;\n\n    const increment = () => count += 1;\n    const decrement = () => count -= 1;\n</script>\n\n<div class=\"counter-component\">\n    <p>The count is {count}!</p>\n    <button on:click={increment}>Increment +</button>\n    <button on:click={decrement}>Decrement -</button>\n</div>\n\n<style>\n    .counter-component {\n        font-family: Arial;\n        padding: 15px;\n    }\n</style>\n```\n\n### React\n\n```javascript\nimport React, { useState } from \"react\";\n\nconst Counter = () => {\n    const [ count, setCount ] = useState(0);\n\n    const increment = () => setCount(count + 1);\n    const decrement = () => setCount(count - 1);\n\n    return(\n        <div style={{\n            padding: \"15px\",\n            fontFamily: \"Arial\"\n        }} className=\"counter-component\">\n            <p>The count is {count}!</p>\n            <button onClick={increment}>Increment +</button>\n            <button onClick={decrement}>Decrement -</button>\n        </div>\n    ); \n}\n\nexport default Counter;\n```",
      "slug": "svelte-vs-framework-lainnya",
      "id": 8
    },
    {
      "judul": "Mengisi waktu kosong",
      "deskripsi": "Mungkin ini bisa jadi solusi untuk mengisi waktu kosongmu",
      "isi": "Waktu kosong itu berbahaya. Waktu kosong adalah ujian bagi kita untuk melihat apakah kita ini orang yang produktif ataukah orang yang nganggur. Kalau kita terbiasa produktif, maka kita akan produktif terus. Kalau terbiasa nganggur, nantinya akan nganggur terus. Nah, biasanya kan kalau ada waktu kosong, pengennya ya nggak ngapa-ngapain. Makanya kubilang **berbahaya**.\n\n## Menghafal atau memurajaah hafalan Qur'an\n\n## Membaca buku\n\n## Blogging",
      "slug": "mengisi-waktu-kosong",
      "id": 9
    },
    {
      "judul": "Langkah menjadi developer frontend web junior",
      "deskripsi": "Are you ready?",
      "isi": "Dunia frontend, atau tepatnya dunia Javascript adalah dunia yang sangat dinamis. Segalanya bergerak dengan sangat cepat. Mungkin pertama kali kita mengenal Javascript, kita sudah berkenalan dengan jQuery yang menurut kita tu magic banget. Lalu, nggak lama kemudian, kita dituntut untuk bisa menguasai AJAX. Lalu, kita dikagetkan dengan kehadiran React dengan Virtual DOMnya, kemudian ada Angular, lalu ada Vue yang merupakan penyederhanaan dari Angular. Dan semua cerita ini masih terus berlanjut.\n\n## Markdown\n\n## HTML\n\n## CSS\n\n## JavaScript\n\n## Svelte\n\n## Database\n\n### Dexie JS\n\n### JSON Server\n\n## Github Action\n\n### Node JS\n\n### Python\n\n### Hugo\n\n### Gitbook\n\n### Gitbook to ebooks",
      "slug": "langkah-menjadi-developer-frontend-junior",
      "id": 13
    },
    {
      "judul": "Menulis blog itu berbahaya",
      "deskripsi": "Kok bisa?",
      "isi": "Menulis blog itu berbahaya kalau kita nggak memahami apa yang kita tuliskan. Misalnya aja kita _nggak tau_ nih apa-apa soal perkembangan manusia, lalu kita katakan deh bahwa anak itu harus A, harus B, padahal ternyata kita tu salah. Nah, itu berbahaya.",
      "slug": "menulis-blog-itu-berbahaya",
      "id": 14
    },
    {
      "judul": "Tips mengikuti Hacktoberfest",
      "deskripsi": "Yuk semarakkan festival tahunan para developer dunia!",
      "isi": "Hacktoberfest adalah suatu festival pemrograman tingkat dunia yang diselenggarakan di bulan Oktober, tentu sudah terlihat dari namanya: Hacktoberfest = Hack + October. Nah, festival di bulan Oktober ini adalah festival FOSS (free open source software). Jadi, tantangannya adalah mengedit proyek-proyek open source yang ada di Github.\n\nMengapa hanya Github? Karena memang itu saja yang diminta oleh Hacktoberfest. Jadi, nanti sistem akan menilai secara otomatis, siapa saja yang sudah berkontribusi di Github minimal tiga proyek. Nah, ketika sudah berkontribusi di tiga proyek, maka sudah dianggap tuntas tantangan Hacktoberfest. Mudah kan? Tapi yang jadi permasalahan adalah proyek apa aja yang mau kita berkontribusi di dalamnya? Nah, aku ada salah satu solusi yang bisa dicoba.\n\n## Solusi ketika bingung mau berkontribusi di mana saat Hacktoberfest\n\nKamu bisa berkontribusi berbagai macam proyek open source berbentuk halaman website di JS.ORG. Aku nggak promosi ya. Tapi memang ini cara yang mudah kok. Pertama, kamu buka aja [cname_active.js di JS.ORG](https://github.com/js-org/js.org/blob/master/cnames_active.js). Di situ, kamu akan menemukan banyak link menuju proyek-proyek open source. Contohnya aja seperti di bawah ini:\n\n```javascript\nvar cnames_active = {\n  \"\": \"js-org.github.io\",\n  \"01mz\": \"01mz.github.io\",\n  \"100dayz\": \"deadcoder0904.github.io/100dayz\",\n  \"101\": \"7anshuai.github.io/js101\", // noCF? (don´t add this in a new PR)\n  \"131\": \"netrvin.github.io\",\n  \"140513\": \"140513.github.io\",\n  \"1c\": \"oknosoft.github.io/1c\",\n  \"21cm\": \"21cm.github.io\",\n  \"23chemistrycamp\": \"nchuchemistry.github.io/23chemistrycamp\",\n  \"2tube\": \"you2php.github.io/you2php\",\n  \"360\": \"360daili.github.io/360daili\",\n  \"3d-go\": \"3d-go.netlify.com\",\n  \"404\": \"licshee.github.io/404\",\n  ...\n}\n```\n\nDi file itu ada 2.582 baris saat diakses hari ini (22/9/2020). Nah, dari sekian banyak itu, kamu bisa memilih satu proyek secara acak. Misalnya aja, aku tertarik nih sama proyek `404` yang kalau di contoh di atas:\n\n```javascript\n\"404\": \"licshee.github.io/404\"\n```\n\nDari `licshee.github.io/404`, maka link Githubnya adalah ",
      "slug": "tips-mengikuti-hacktoberfest",
      "id": 15
    },
    {
      "judul": "Membuat domain gratis JS.ORG",
      "deskripsi": "Kalau bisa gratis, kenapa harus bayar?",
      "isi": "1. Pastikan websitemu dihosting di Github atau Gitlab",
      "slug": "membuat-domain-gratis-jsorg",
      "id": 16
    },
    {
      "judul": "Menjalankan Node JS di HP",
      "deskripsi": "Mengatasi permasalahan akses root",
      "isi": "Kalau kita main pemrograman di HP kan pakai Termux. Terus, kita nggak bisa akses root HP di Termux jika HP nggak di-root. Terus, selama ini install aplikasi Termux di mana? Dia terinstallnya di rootnya Termux. Jadi semacam root virtual gitu.\n\nNah, kalau kita jalankan `npm i`, kadang bisa dan kadang nggak bisa. Kalau nggak bisa i biasanya karena nggak dapat akses root HP. Maka, solusinya adalah kita install di rootnya Termux yaitu di `~`.\n\nNah, kemudian untuk editing kodenya, nggak bisa pakai teks editornya yang di Android tapi harus pakai Termux. Nah, aku pakai micro editor, bisa diinstall dengan `pkg install micro`.",
      "slug": "menjalankan-node-js-di-hp",
      "id": 17
    }
  ]
}