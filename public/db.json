{
  "postingan": [
    {
      "judul": "Cara menggunakan Svelte",
      "deskripsi": "Membuat website lebih cepat, ringan, dan menyenangkan",
      "isi": "## Instalasi\n\n```bash\nnpx degit sveltejs/template nama-proyekmu\n```\n\nKemudian, akan terdownlod tuh template Svelte di laptopmu. Nah, sekarang masuk ke `nama-proyekmu` dan jalankan:\n\n```bash\nnpm i\n```\n\nSetelah selesai instalasi, jalankan:\n\n```bash\nnpm run dev\n```\n\nNah, sekarang kamu buka `localhost:5000`. Lalu, akan muncul Hello World ala Svelte...",
      "slug": "cara-menggunakan-svelte",
      "id": 4
    },
    {
      "judul": "Sistem di balik blog ini",
      "deskripsi": "Svelte + Page JS + JSON Server",
      "isi": "## Filosofi\n\nAku mau website yang cepat. Dan kebetulan juga lagi suka sama Svelte karena mudah, sintaksnya enak dilihat, dan bundlenya pun kecil.\n\nTerus, untuk backendnya sih maunya ya nggak usah buat lagi sih. Capek. Akhirnya, aku teringat sama JSON Server. Jadi, aku cuma perlu menyiapkan satu file `db.json` yang kemudian akan diolah oleh JSON Server menggunakan semua metode HTTP Request. Jadi, aku nggak perlu coding sistemnya lagi. Tinggal HTTP Request aja dari linknya berdasarkan routes dan param yang sudah dijelaskan di docsnya.\n\n## Bedah sistem blog\n\nBlog ini kubagi jadi dua sistem yaitu ketika user membukanya dan ketika aku yang membukanya. Jadi, bisa dibilang _ketika user membukanya_ adalah sistem yang sudah di level _production_ sedangkan yang _ketika aku membukanya_ adalah level _development_.\n\nPerbedaannya bisa digambarkan seperti tabel di bawah ini:\n\n| Development | Production |\n|---|---|\n| Menggunakan Svelte + JSON Server | Menggunakan Svelte |\n| Akses baca tulis | Akses baca |\n| Browser + Node JS | Browser |\n\n## Mengapa menggunakan Svelte?\n\n> Svelte itu **compiler**!\n\nArtinya, Svelte itu berbeda dengan framework Javascript lainnya seperti Vue, React, dan Angular.\n\n## Perbedaan sistem blog ini dengan SSG\n\nStatic site generator (SSG) itu sistemnya adalah menggabungkan file-file layout dengan file-file Markdown menjadi sebuah website utuh.\n\nTentu sangat berbeda dengan blog ini. Kalau di blog ini, basisnya bukan sekumpulan file Markdown sebagaimana SSG tapi menggunakan database yang disediakan oleh JSON Server yang tugasnya adalah mengolah file `db.json` sesuai dengan API dari [JSON Server](https://github.com/typicode/json-server). Cara menggunakan JSON Server hanyalah dengan melakukan HTTP Request berdasarkan API yang tersedia. Misalnya aja aku punya file `db.json` yang isinya:\n\n```json\n{\n\t\"postingan\": [\n\t\t{\n\t\t\t\"id\": 1,\n\t\t\t\"judul\": \"Hello\",\n\t\t\t\"isi\": \"Hello world\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 2,\n\t\t\t\"judul\": \"Kedua\",\n\t\t\t\"isi\": \"Postingan kedua\"\n\t\t}\n\t]\n}\n```\n\nKalau di JSON Server, misalnya kita ingin menampilkan semua postingan, maka kita hanya perlu melakukan GET pada link `localhost:3000/postingan`. Kemudian, kalau kita ingin mendapatkan postingan pertama, kita cukup GET pada `localhost:3000/postingan/1`. Kalau kita ingin menambah artikel baru, cukup POST pada link `localhost:3000/postingan`. Kalau ingin menghapus postingan kedua, cukup DELETE pada `localhost:3000/postingan/2`. Mudah kan ya? Nah, itu semua aku jalankan di development karena memerlukan Node JS untuk menjalankan JSON Servernya.\n\n## Deploy dengan Github Action\n\nUntuk deployment blog ini, aku menggunakan Github Action, sebuah fitur dari Github untuk deployment. Tentu, membantu banget fitur ini.\n\n```yaml\nname: build svelte\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  deploy:\n    runs-on: ubuntu-18.04\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: true\n\n      - name: Setup Node\n        uses: actions/setup-node@v1\n        with:\n          node-version: \"14.x\"\n\n      - name: Setup Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.x\"\n\n      - name: Cache dependencies\n        uses: actions/cache@v1\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: ${{ runner.os }}-node-\n\n      - name: Clone Index\n        run: python clone-index.py\n\n      - name: Generate sitemap\n        run: python generate-sitemap.py\n\n      - name: Pecah JSON\n        run: python pecah-json.py\n\n      - name: Install\n        run: npm i\n\n      - name: Build\n        run: npm run build\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n```\n\n## Clone index\n\n```python\nimport os, json\n\nos.chdir(\"public\")\nwith open(\"db.json\") as f:\n data = json.load(f)\nslug = []\nfor x in data[\"postingan\"]:\n slug.append(x[\"slug\"])\nfor x in slug:\n os.system('cp index.html ' + x + '.html')\nos.system(\"cp index.html 404.html\")\nos.system(\"cp index.html cari.html\")\n```\n\n## Generate sitemap\n\n```python\nimport os, json\n\nos.chdir(\"public\")\nwith open(\"db.json\") as f:\n\tdata = json.load(f)\nslug = []\nfor x in data[\"postingan\"]:\n\tslug.append(x[\"slug\"])\nslug.reverse()\nsitemap = '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">'\nfor x in slug:\n\tsitemap += '<url><loc>https://blogzen.js.org/' + x + '</loc></url>'\nsitemap += '<url><loc>https://blogzen.js.org/</loc></url>'\nsitemap += '</urlset>'\nolah = open(\"sitemap.xml\", \"w\")\nolah.write(sitemap)\nolah.close()\n```\n\n## Pemecahan file JSON\n\n```python\nimport os, json\n\nos.chdir(\"public\")\nwith open(\"db.json\") as f:\n\tdata = json.load(f)\nslug = []\njudul = []\ndeskripsi = []\nisi = []\nfor x in data[\"postingan\"]:\n\tslug.append(x[\"slug\"])\n\tjudul.append(x[\"judul\"])\n\tdeskripsi.append(x[\"deskripsi\"])\n\tisi.append(x[\"isi\"])\n\nberanda = []\nfor (n, x) in enumerate(slug):\n\tberanda.append({\"slug\": x, \"judul\": judul[n], \"deskripsi\": deskripsi[n]})\nsimpan_beranda = open(\"beranda.json\", \"w\")\nsimpan_beranda.write(json.dumps(beranda))\nsimpan_beranda.close()\n\nfor (n, x) in enumerate(slug):\n\ttulis = open(x + '.json', 'w')\n\ttulis.write(json.dumps({\"judul\": judul[n], \"deskripsi\": deskripsi[n], \"isi\": isi[n]}))\n\ttulis.close()\n```",
      "slug": "sistem-di-balik-blog-ini",
      "id": 5
    },
    {
      "judul": "Router di Svelte JS",
      "deskripsi": "Mencoba menerapkan keunggulan SPA!",
      "isi": "Router adalah hal yang sangat esensial bagi suatu website yang menerapkan single page app (SPA). Karena dengan router, kita bisa memanipulasi URL di website SPA yang kemudian akan kita jalankan fungsi-fungsi tertentu sesuai dengan rules URL yang telah kita atur. Contoh dari SPA adalah halaman:\n\n- situs.com\n- situs.com/about\n- situs.com/anggota/200\n\nSemua halaman tersebut sebenarnya hanyalah satu halaman yang sama namun menampilkan halaman yang saling berbeda dikarenakan sudah diatur oleh routernya.\n\nAda dua macam router yaitu yang menggunakan hash sama yang nggak. Kalau menggunakan hash (contoh: `situs.com/#/daftar`), cocok pakai **svelte-spa-router**. Sedangkan kalau _nggak_ pakai hash, pakai **page**.\n\n## Menggunakan Svelte SPA Router\n\n### Instalasi\n\n```bash\nnpm i svelte-spa-router\n```\n\n### Import halaman-halaman untuk router\n\nIni adalah contoh ketika dipanggil di dalam `App.svelte`:\n\n```html\n<Router {routes}/>\n\n<script type=\"text/javascript\">\n\timport Router from 'svelte-spa-router'\n\n\timport Beranda from './halaman/Beranda.svelte'\n\timport Tambah from './halaman/Tambah.svelte'\n\timport Edit from './halaman/Edit.svelte'\n\t\n\tconst routes = {\n\t\t'/': Beranda,\n\t\t'/tambah': Tambah,\n\t\t'/:id': Edit\n\t}\n</script>\n```\n\n### Contoh penggunaan params\n\n```html\n<p>Hello {params.nama}</p>\n\n<script type=\"text/javascript\">\n\texport let params\n</script>\n```\n\n### Push router\n\n```html\n<script type=\"text/javascript\">\n\timport {push} from 'svelte-spa-router'\n\tconst pindah = () => push('/about-me')\n</script>\n\n<div on:click={pindah}>Klik ini</div>\n```\n\n### Push router dengan `<a>`\n\n```html\n<a href='/#hello'>Hello</a>\n```\n\n## Menggunakan Page\n\n### Instalasi\n\n```bash\nnpm i page\n```\n\nKemudian, buka `package.json` dan cari tulisan:\n\n```json\n\"start\": \"sirv public\"\n```\n\nNah, itu diganti dengan:\n\n```json\n\"start\": \"sirv public --single\"\n```\n\n### Import halaman-halaman untuk router\n\nIni adalah contoh ketika dipanggil di dalam `App.svelte`:\n\n```html\n<script>\n import router from \"page\"\n\n import Beranda from \"./halaman/Beranda.svelte\"\n import Baca from \"./halaman/Baca.svelte\"\n import Tulis from \"./halaman/Tulis.svelte\"\n import NotFound from \"./halaman/NotFound.svelte\"\n\n let page\n let params\n\n router(\"/\", () => page = Beranda)\n router(\"/tulis\", () => page = Tulis)\n router(\"/:slug\", (x, next) => {\n \tparams = x.params\n \tnext()\n }, () => page = Baca)\n router(\"/*\", () => page = NotFound)\n\n $: if(params){\n  window.scrollTo(0, 0)\n }\n</script>\n\n<svelte:component this={page} {params}/>\n```\n\n### Contoh penggunaan params\n\n```html\n<script type=\"text/javascript\">\n\texport let params\n</script>\n\n<p>Hello {params.nama}</p>\n```\n\n### Push router\n\n```html\n<script type=\"text/javascript\">\n\timport router from \"page\"\n\tconst pindah = () => router.replace('/about-me')\n</script>\n\n<div on:click={pindah}>Klik ini</div>\n```\n\n### Push router dengan `<a>`\n\n```html\n<a href='/hello'>Hello</a>\n```",
      "slug": "router-di-svelte-js",
      "id": 7
    },
    {
      "judul": "Svelte vs framework lainnya",
      "deskripsi": "Akankah Svelte menjadi pembuka era JavaScript baru?",
      "isi": "## Hasil benchmark\n\n![Bencmark](https://res.cloudinary.com/practicaldev/image/fetch/s--nj6O-fJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/DssqmdjVsAE8Il4%3Fformat%3Djpg%26name%3Dlarge)\n\n## Sintaks yang lebih sederhana\n\n### Svelte\n\n```html\n<script>\n    let count = 0;\n\n    const increment = () => count += 1;\n    const decrement = () => count -= 1;\n</script>\n\n<div class=\"counter-component\">\n    <p>The count is {count}!</p>\n    <button on:click={increment}>Increment +</button>\n    <button on:click={decrement}>Decrement -</button>\n</div>\n\n<style>\n    .counter-component {\n        font-family: Arial;\n        padding: 15px;\n    }\n</style>\n```\n\n### React\n\n```javascript\nimport React, { useState } from \"react\";\n\nconst Counter = () => {\n    const [ count, setCount ] = useState(0);\n\n    const increment = () => setCount(count + 1);\n    const decrement = () => setCount(count - 1);\n\n    return(\n        <div style={{\n            padding: \"15px\",\n            fontFamily: \"Arial\"\n        }} className=\"counter-component\">\n            <p>The count is {count}!</p>\n            <button onClick={increment}>Increment +</button>\n            <button onClick={decrement}>Decrement -</button>\n        </div>\n    ); \n}\n\nexport default Counter;\n```",
      "slug": "svelte-vs-framework-lainnya",
      "id": 8
    },
    {
      "judul": "Mengisi waktu kosong",
      "deskripsi": "Mungkin ini bisa jadi solusi untuk mengisi waktu kosongmu",
      "isi": "Waktu kosong itu berbahaya. Waktu kosong adalah ujian bagi kita untuk melihat apakah kita ini orang yang produktif ataukah orang yang nganggur. Kalau kita terbiasa produktif, maka kita akan produktif terus. Kalau terbiasa nganggur, nantinya akan nganggur terus. Nah, biasanya kan kalau ada waktu kosong, pengennya ya nggak ngapa-ngapain. Makanya kubilang **berbahaya**.\n\n## Menghafal atau memurajaah hafalan Qur'an\n\n## Membaca buku\n\n## Blogging",
      "slug": "mengisi-waktu-kosong",
      "id": 9
    },
    {
      "judul": "Langkah menjadi developer frontend web junior",
      "deskripsi": "Are you ready?",
      "isi": "Dunia frontend, atau tepatnya dunia Javascript adalah dunia yang sangat dinamis. Segalanya bergerak dengan sangat cepat. Mungkin pertama kali kita mengenal Javascript, kita sudah berkenalan dengan jQuery yang menurut kita tu magic banget. Lalu, nggak lama kemudian, kita dituntut untuk bisa menguasai AJAX. Lalu, kita dikagetkan dengan kehadiran React dengan Virtual DOMnya, kemudian ada Angular, lalu ada Vue yang merupakan penyederhanaan dari Angular. Dan semua cerita ini masih terus berlanjut. Hingga akhirnya aku bertemu dengan Svelte yang _write less, do more_!\n\nJadi, berikut ini adalah roadmap mempelajari frontend versiku. Ya mungkin berbeda sih sama yang lainnya. Jadi mungkin ini nggak bisa jadi patokan utama. Tapi bisa sih untuk jadi preferensi kalau bingung mau belajar apa.\n\n## Markdown\n\n## HTML\n\n## CSS\n\n## JavaScript\n\n## Svelte\n\n## Database\n\n### Dexie JS\n\n### JSON Server\n\n## Github Action\n\n### Node JS\n\n### Python\n\n### Hugo\n\n### Gitbook\n\n### Gitbook to ebooks",
      "slug": "langkah-menjadi-developer-frontend-junior",
      "id": 13
    },
    {
      "judul": "Menulis blog itu berbahaya",
      "deskripsi": "Kok bisa?",
      "isi": "Menulis blog itu berbahaya kalau kita nggak memahami apa yang kita tuliskan. Misalnya aja kita _nggak tau_ nih apa-apa soal perkembangan manusia, lalu kita katakan deh bahwa anak itu harus A, harus B, padahal ternyata kita tu salah. Nah, itu berbahaya.",
      "slug": "menulis-blog-itu-berbahaya",
      "id": 14
    },
    {
      "judul": "Tips mengikuti Hacktoberfest",
      "deskripsi": "Yuk semarakkan festival tahunan para developer dunia!",
      "isi": "Hacktoberfest adalah suatu festival pemrograman tingkat dunia yang diselenggarakan di bulan Oktober, tentu sudah terlihat dari namanya: Hacktoberfest = Hack + October. Nah, festival di bulan Oktober ini adalah festival FOSS (free open source software). Jadi, tantangannya adalah mengedit proyek-proyek open source yang ada di Github.\n\nMengapa hanya Github? Karena memang itu saja yang diminta oleh Hacktoberfest. Jadi, nanti sistem akan menilai secara otomatis, siapa saja yang sudah berkontribusi di Github minimal tiga proyek. Nah, ketika sudah berkontribusi di tiga proyek, maka sudah dianggap tuntas tantangan Hacktoberfest. Mudah kan? Tapi yang jadi permasalahan adalah proyek apa aja yang mau kita berkontribusi di dalamnya? Nah, aku ada salah satu solusi yang bisa dicoba.\n\n## Solusi ketika bingung mau berkontribusi di mana saat Hacktoberfest\n\nKamu bisa berkontribusi berbagai macam proyek open source berbentuk halaman website di JS.ORG. Aku nggak promosi ya. Tapi memang ini cara yang mudah kok. Pertama, kamu buka aja [cname_active.js di JS.ORG](https://github.com/js-org/js.org/blob/master/cnames_active.js). Di situ, kamu akan menemukan banyak link menuju proyek-proyek open source. Contohnya aja seperti di bawah ini:\n\n```javascript\nvar cnames_active = {\n  \"\": \"js-org.github.io\",\n  \"01mz\": \"01mz.github.io\",\n  \"100dayz\": \"deadcoder0904.github.io/100dayz\",\n  \"101\": \"7anshuai.github.io/js101\", // noCF? (don´t add this in a new PR)\n  \"131\": \"netrvin.github.io\",\n  \"140513\": \"140513.github.io\",\n  \"1c\": \"oknosoft.github.io/1c\",\n  \"21cm\": \"21cm.github.io\",\n  \"23chemistrycamp\": \"nchuchemistry.github.io/23chemistrycamp\",\n  \"2tube\": \"you2php.github.io/you2php\",\n  \"360\": \"360daili.github.io/360daili\",\n  \"3d-go\": \"3d-go.netlify.com\",\n  \"404\": \"licshee.github.io/404\",\n  ...\n}\n```\n\nDi file itu ada 2.582 baris saat diakses hari ini (22/9/2020). Nah, dari sekian banyak itu, kamu bisa memilih satu proyek secara acak. Misalnya aja, aku tertarik nih sama proyek `404` yang kalau di contoh di atas:\n\n```javascript\n\"404\": \"licshee.github.io/404\"\n```\n\nDari `licshee.github.io/404`, maka link Githubnya adalah `github.com/licshee/404`. Nah, tinggal kamu buka aja linknya, terus diedit-edit. Gitu aja.\n\n## Aku udah buat toolsnya\n\nLangsung cek aja <https://mzaini30.js.org/hacktoberfest-finder/>",
      "slug": "tips-mengikuti-hacktoberfest",
      "id": 15
    },
    {
      "judul": "Membuat domain gratis JS.ORG",
      "deskripsi": "Kalau bisa gratis, kenapa harus bayar?",
      "isi": "Domain itu seperti `.com`, `.net`, dan `.js.org`. Cuma, yang membedakan JS.ORG dengan dotcom dan dotnet adalah karena dia **gratis**. Tentu, nggak akan dilewatkan dong sesuatu yang namanya gratis itu.\n\nKenapa bisa gratis? Karena domain ini didukung oleh Cloudflare buat semua komunitas JavaScript. Makanya, nama domainnya ini JS.ORG. JS, singkatan dari JavaScript. Tapi, nggak mesti komunitas JavaScript sih. Blog biasa juga bisa. Yang penting ya hostingnya di _Github_ atau _Gitlab_.\n\nDan sekarang, kita mulai bahas aja yang kita tunggu-tunggu tadi, yaitu cara mendaftar domain JS.ORG:\n\n1. Pastikan websitemu dihosting di Github \natau Gitlab\n2. Tentukan nama domainnya. Misalnya aja mau `halo.js.org`, maka buat repostiori `halo` di Githubku\n3. Buat file bernama `CNAME` yang isinya `halo.js.org`\n4. Terus daftarkan di [JS.ORG](https://github.com/js-org/js.org/blob/master/cnames_active.js) dengan format seperti ini: `\"halo\": \"namamu.github.io/halo\",`\n\nMudah aja kan cara daftarnya? Ayo deh langsung aja dicoba.",
      "slug": "membuat-domain-gratis-jsorg",
      "id": 16
    },
    {
      "judul": "Menjalankan Node JS di HP",
      "deskripsi": "Mengatasi permasalahan akses root",
      "isi": "Kalau kita main pemrograman di HP kan pakai Termux. Terus, kita nggak bisa akses root HP di Termux jika HP nggak di-root. Terus, selama ini install aplikasi Termux di mana? Dia terinstallnya di rootnya Termux. Jadi semacam root virtual gitu.\n\nNah, kalau kita jalankan `npm i`, kadang bisa dan kadang nggak bisa. Kalau nggak bisa i biasanya karena nggak dapat akses root HP. Maka, solusinya adalah kita install di rootnya Termux yaitu di `~`.\n\nNah, kemudian untuk editing kodenya, nggak bisa pakai teks editornya yang di Android tapi harus pakai Termux. Nah, aku pakai micro editor, bisa diinstall dengan `pkg install micro`.",
      "slug": "menjalankan-node-js-di-hp",
      "id": 17
    },
    {
      "judul": "Mengapa menulis?",
      "deskripsi": "Mungkin ini bisa menjadi alasan bagimu buat menulis",
      "isi": "Menulis adalah meretas masa. Dengan menulis, kita bisa hidup abadi bersama tulisan kita. Mungkin nyawa ada batasnya, namun ide tak ada matinya. Dengan ide itulah kita kekal abadi tanpa pudar.\n\nTulisan adalah kontainer dari ide-ide yang kita bangun. Dengan ide-ide itulah kita bisa memberikan _nyawa_ kepada orang-orang setelah kita, entah itu berupa wawasan, pemantik, ide baru, kontruksi ide yang telah ada, dan berbagai bentuk lainnya. Bukankah kita ingin selalu _ada_ untuk mengayomi generasi penerus kita? Bukankah kita ingin selalu melihat keceriaan generasi setelah kita? Dengan tulisan lah kita bisa melakukannya.\n\nMaka, kita perlu suatu platform yang menjadi prasasti tulisan kita. Orang kerap kali menulis di media sosial. Namun, ketika kita tiada, perlahan media sosial kita pun akan pudar. Kita perlu prasasti yang lebih abadi lagi. Itulah blog! Dengan blog, tulisan kita lebih abadi dan lebih awet karena blog nggak mati setelah kita mati. Kecuali wordpress.com. Kalau WordPress.com, dia ketat. Tulisan spam, dimatikan blognya. Entah kalau lama nggak update, apakah dimatikan juga atau nggak. Maka, harapan kita tinggal Blogspot karena kalau Medium entah ada aturan apa lagi. Dia mulai money oriented. Dan tentu saja, kelak akan dilibasnya blog-blog Medium yang udah lama nggak aktif.\n\nKalau aku? Aku pakai [Github Pages](https://github.com/mzaini30/blogzen) untuk blog ini, juga menggunakan domain [JS.ORG](/membuat-domain-gratis-jsorg) yang dibackup sama Cloudflare. Aku harap juga semoga Github Pages sama JS.ORG bertahan lama sehingga tulisanku akan lebih lama di dunia Maya.",
      "slug": "mengapa-menulis",
      "id": 18
    },
    {
      "judul": "About me",
      "deskripsi": "Siapa aku?",
      "isi": "Hai, aku **Zen**, seorang putra Samarinda kelahiran 14 Januari 1995. Ini adalah profil tentangku:\n\n## Email\n\n<muhzaini30@gmail.com>\n\n## Pekerjaan\n\n2020\n\n- Web developer dan kurator opini di sanggarcaraka.com\n- Dosen pembimbing di kampus Nulis Aja Community\n\n2019\n\n- Guru [tahfidz](/betapa-uniknya-hafalan-quran) di Mahad Tahfidzul Quran Baitul Izzah\n- Penata letak di Caraka Publishing\n\n2015\n- Mekanik di toko sepeda Sinar Jaya\n\n## Proyek yang sudah dikerjakan\n\n2019\n\n- panglimadelivery.com (website mati)\n\n2017\n\n- antrianrutansamarinda.com (website mati)\n\n## Pendidikan\n\n2020\n\n- S1 Psikologi di Universitas Mulawarman\n\n2016\n\n- D2 Bahasa Arab di Ma'had Hasan bin Ali",
      "slug": "about-me",
      "id": 19
    },
    {
      "judul": "Yang nampak dari abstraknya kecerdasan",
      "deskripsi": "Kecerdasan tak dapat diukur!",
      "isi": "Memang sih sekarang telah tersedia berbagai instrumen pengukur kecerdasan seperti tes IQ, tes minat bakat, dan tes-tes lainnya. Namun, kali ini aku akan mengajakmu untuk melihat sesuatu yang luar biasa, sesuatu yang di luar jangkauan orang-orang biasa, yaitu betapa luar biasanya orang-orang yang **sangat** cerdas.\n\nKita hidup di tengah-tengah orang-orang sangat cerdas. Biasanya mereka tampak dalam bentuk memiliki hafalan yang banyak, ketika menawarkan barang selalu closing, memiliki kelincahan yang luar biasa, dan berbagai keahlian lainnya. Namun, benarkah kecerdasan itu hadir hanya semata-mata mereka memiliki kecerdasan? Ternyata nggak. Semua karena **kegigihan**. Betapa banyaknya waktu yang telah mereka korbankan untuk membentuk sesuatu yang luar biasa yang kini _melekat_ pada diri mereka.\n\nSering kita melihat seseorang yang memiliki kecerdasan bawaan akan kalah sama orang yang biasa-biasa aja tapi gigih melatih sesuatu yang khusus dengan **fokus**. Misalnya aja menghafal Quran. Orang yang dengan kecerdasan biasa-biasa aja namun memiliki kesungguhan dalam menghafal Quran, akan dengan cepat menyelesaikan hafalannya bahkan bisa mutqin (lancar). Bukan sesuatu yang mudah untuk mencapai kemutqinan dalam menghafal Quran. Dia hanya dapat ditempuh jika kita menyediakan sebagian besar malam dan siang kita untuk Quran, meninggalkan denda gurau, dan mendekatkan diri pada-Nya.",
      "slug": "yang-nampak-dari-abstraknya-kecerdasan",
      "id": 21
    },
    {
      "judul": "Menggunakan Dexie JS",
      "deskripsi": "Database offline",
      "isi": "Dexie JS adalah sebuah library JavaScript yang berguna untuk kita membuat database tanpa memerlukan suatu server. Eh, emang bisa? Gimana caranya? Jadi, dengan Dexie JS ini, kita hanya memerlukan browser sebagai tempat penyimpanan databasenya. Dexie menggunakan teknologi IndexedDB, yaitu suatu database manager di browser untuk menyimpan data. Alasan mengapa aku menggunakan API-API dari Dexie dibandingkan API-API dari IndexedDB untuk mengolah database offline adalah karena sintaks-sintaks Dexie yang lebih sederhana. Jadi, kita bisa lebih berfokus ke alur programnya aja.\n\nSebelumnya, aku menjelaskan kode-kode program di bawah ini dengan mengistilahkan table sebuah database pada table yang sesungguhnya. Jadi, ada yang namanya kolom dan baris. Contohnya seperti berikut:\n\n| Nama | Alamat |\n|---|---|\n| Zen | Samarinda |\n| Seseorang | Balikpapan |\n\nDari table di atas, kita bisa lihat bahwa `nama` dan `alamat` adalah nama kolom. Sedangkan `Zen` dan `Samarinda` adalah isi table pada baris yang sama.\n\nOke, langsung aja kita mulai dari instalasi.\n\n## Instalasi\n\nUntuk instalasi, kamu cukup mengincludekan file Dexie ke dalam HTML dengan sintaks sebagai berikut:\n\n```html\n<script src=\"https://unpkg.com/dexie@latest/dist/dexie.min.js\"></script>\n```\n\nTapi, kalau kamu mau download dulu file Dexienya bisa sih. Tinggal kamu buka aja link itu baru disave. Tapi, kalau mau ala-ala Linux atau download dari Terminal ya, kodenya seperti ini yang kamu jalankan di Terminal:\n\n```bash\nwget https://unpkg.com/dexie@latest/dist/dexie.min.js\n```\n\nLalu, setelah itu, includekan Dexie dengan script berikut:\n\n```html\n<script src=\"dexie.min.js\"></script>\n```\n\nItu kalau dengan file Dexienya secara CDN (content delivery network). Tapi, kalau mau coba dengan Node JS, bisa dengan:\n\n```bash\nnpm i dexie\n```\n\nLalu, importnya dengan:\n\n```javascript\nimport Dexie from \"dexie\"\n```\n\nTapi kalau aku sih suka yang dengan CDN daripada import dari Node JS, karena untuk memisahkan antara [framework JavaScript](/cara-menggunakan-svelte) yang menggunakan Node JS dengan script-script eksternal. Tapi kali ini ya. Nggak tau kalau besok-besok berubah pikiran. Hehehhehe....\n\n## Init database\n\nHal pertama yang dilakukan setelah mengincludekan file Dexie adalah menginit databasenya. Nah, pada contoh di bawah ini, aku membuat database bernama `nama database`, lalu database tersebut aku simpan di variabel `db`.\n\n```javascript\ndb = new Dexie(\"nama database\")\ndb.version(1).stores({\n data: \"++id, nama, alamat\"\n})\n```\n\nKemudian, dari database `db`, aku buat tablenya yang bernama `data` dan berisi kolom `id` yang auto increment, `nama`, dan `alamat`. Oh iya, di Dexie ini, semuanya disimpan dalam bentuk string. Jadi, walaupun kamu menyimpannya dalam bentuk number, akan disimpan ke dalam bentuk string.\n\nMengapa hanya membuat satu tabel? Karena Dexie ini memanipulasi fungsi-fungsi pada IndexedDB, maka hanya bisa membuat satu table aja di satu database, soalnya kan ini bukan SQL yang merupakan kaitan antara satu table dengan table lainnya. Tapi nggak msalah sih. Yang penting kan, kita sudah punya fitur database untuk aplikasi offline kita. Itu aja udah Alhamdulillah banget ya.\n\nKemudian, kita akan mempelajari bagaimana caranya **CRUD** di Dexie ini:\n\n## Memasukkan data ke database _(Create)_\n\n```javascript\ndb.data.add({\n nama: \"Zen\",\n alamat: \"Samarinda\"\n}).then(() => console.log(\"success\"))\n```\n\nPada contoh di atas, aku menggunakan `.then(() => console.log(\"success\"))` di akhir dari kodenya. Itu adalah callback yang akan dijalankan jika success.\n\n## Membaca data _(Read)_\n\n```javascript\ndb.data.toArray(x => console.log(x))\n```\n\nContoh dari hasil di atas adalah:\n\n```json\n[\n {\n  \"id\": 1,\n  \"nama\": \"Zen\",\n  \"alamat\": \"Samarinda\"\n },\n {\n  \"id\": 2,\n  \"nama\": \"Siapa\",\n  \"alamat\": \"Tenggarong\"\n },\n]\n```\n\nNah, baru deh hasil JSON di atas kita olah di berbagai framework JavaScript favorit kita.\n\n## Update data _(Update)_\n\n```javascript\ndb.data.where({\n id: 2\n}).modify({\n nama: \"Dia\",\n alamat: \"Samarinda\"\n})\n```\n\nUntuk update data ini, pertama kita sebutkan dulu condition yang membuat suatu baris table di-update. Nah, kalau dari contoh di atas, kita ambil baris table dengan id 2. Itu nggak mesti diisi dengan id. Bisa juga diisi dengan `nama: \"Zen\"` atau dengan nama kolom lainnya.\n\n## Delete data _(Delete)_\n\n```javascript\ndb.data.delete(3)\n```\n\nAngka 3 pada contoh di atas adalah id dari baris data yang mau dihapus. Nah, itu artinya, yang mau dihapus adalah baris data dengan id 3.\n\n## Membalik urutan data\n\nUntuk membalik urutan data, kita cukup menggunakan API `.reverse()`.\n\n```javascript\ndb.data.reverse().toArray(x => console.log(x))\n```",
      "slug": "menggunakan-dexie-js",
      "id": 22
    },
    {
      "judul": "Membuat APK dari HTML",
      "deskripsi": "Tanpa Android Studio!",
      "isi": "Membuat suatu aplikasi Android adalah impian dari banyak developer. Namun terkadang tujuan mulia itu (membuat aplikasi Android yang bermanfaat) tersandung pada suatu fakta bahwa untuk membuat aplikasi Android dibutuhkan Android Studio atau setidaknya Android SDK yang nanti bisa dikoneksikan dengan React Native maupun [Svelte](/cara-menggunakan-svelte) Native. Tapi, itu semua sama aja. Sama-sama harus menggunakan laptop dengan RAM minimal 4 GB untuk menjalankannya. Nah, kalau misalnya kita hanya mempunyai laptop dengan RAM 2 GB, ya hanya bisa gigit jari karena laptop harus kerja keras untuk sekadar membuat satu aplikasi.\n\nNah, kali ini aku akan memberi tau cara membuat aplikasi Android dengan mudah! Yap, mudah banget karena kamu hanya perlu file HTML untuk membuatnya dan menyiapkan icon aplikasi yang bebas aja, yang penting bentuk iconnya kotak. Yuk lah kita mulai...\n\n## Menyiapkan tools dan bahan\n\nDownload dulu [APK Builder](https://github.com/mzaini30/apk/blob/master/APK%20Builder-com.gmail.heagoo.apkbuilder-1.1.0-11.apk). APK Builder ini adalah tool utama yang kita gunakan untuk convert dari HTML jadi aplikasi Android.\n\nLalu, siapkan juga file HTMLnya. Dikumpulkan dalam satu folder ya...\n\nKemudian, siapkan juga gambar berdimensi kotak, untuk icon aplikasi.\n\n## Membuat aplikasi dari APK Builder\n\nBuka aplikasi APK Builder lalu pilih `New Project`.\n\nLalu tentukan nama aplikasi yang diinginkan. Di sini, aku memilih menggunakan nama `Coba Dulu`. Nah, secara otomatis, nama packagenya menjadi `com.example.cobadulu`.\n\nLalu muncul pilihan template aplikasi, pilih yang `Web Wrapper`.\n\nTerus muncul pertanyaan `Activity Name`, klik `Finish` aja.\n\nSelamat, aplikasimu (masih kosongan tapi) sudah jadi...\n\n## Mengedit kode Java\n\nBuka `src/com/example/cobadulu/MainActivity.java`. Lalu, hapus semua kodenya dan ganti dengan kode berikut ini:\n\n```java\npackage com.example.murajaah;\n\nimport android.annotation.TargetApi;\nimport android.app.Activity;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.view.KeyEvent;\nimport android.webkit.WebResourceRequest;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\n\nimport android.net.Uri;\nimport android.content.Intent;\n\npublic class MainActivity extends Activity {\n\n   \n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n\n        setContentView(R.layout.activity_main);\n\n\n\n        WebView webView = (WebView)findViewById(R.id.web);\n\n         \n         webView.getSettings().setJavaScriptEnabled(true);\n         webView.getSettings().setDomStorageEnabled(true);\n\nwebView.getSettings().setAllowFileAccessFromFileURLs(true); webView.getSettings().setAllowUniversalAccessFromFileURLs(true);\n\nwebView.getSettings().setAllowFileAccess(true); webView.getSettings().setAllowContentAccess(true);\n\n        webView.setWebViewClient(new WebViewClient() {\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, String url) {\n                \n\n            if (url.startsWith(\"http\")){ \n                    Intent i = new Intent(Intent.ACTION_VIEW, Uri.parse(url)); \n                    startActivity(i); \n                   \n            } else {\n                     view.loadUrl(url);\n                     \n            } \n             return true; \n\n\n\n\n            }\n/*\n            @TargetApi(Build.VERSION_CODES.N)\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                return false;\n            }\n*/\n        });\n\n        if (savedInstanceState != null) {\n          webView.restoreState(savedInstanceState);\n         } else {\n            webView.loadUrl(\"file:///android_asset/index.html\");\n        }\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n\n\n        WebView webView = (WebView)findViewById(R.id.web);\n\n\n\n        if (event.getAction() == KeyEvent.ACTION_DOWN) {\n            switch (keyCode) {\n                case KeyEvent.KEYCODE_BACK:\n                    if (webView.canGoBack()) {\n                        webView.goBack();\n                    } else {\n                        finish();\n                    }\n                    return true;\n            }\n\n        }\n        return super.onKeyDown(keyCode, event);\n    }\n\n    @Override\n    protected void onSaveInstanceState(Bundle outState )\n    {\n        WebView webview = (WebView)findViewById(R.id.web);\n\n      super.onSaveInstanceState(outState);\n        webview.saveState(outState);\n    }\n\n    @Override\n    protected void onRestoreInstanceState(Bundle savedInstanceState)\n    {\n        WebView webview = (WebView)findViewById(R.id.web);\n\n        super.onRestoreInstanceState(savedInstanceState);\n        webview.restoreState(savedInstanceState);\n    }\n\n}\n```\n\nNah, perhatikan pada baris pertama kode yang isinya:\n\n```java\npackage com.example.murajaah;\n```\n\nIngat kan kalau nama package kita `com.example.cobadulu`? Nah, ubah bagian itu menjadi:\n\n```java\npackage com.example.cobadulu;\n```\n\n## Mengedit layout\n\nBuka `AndroidManifest.xml`.\n\nPerhatikan pada bagian:\n\n```javascript\nandroid:theme=\"@style/AppTheme\"\n```\n\nPada bagian itu, ubah menjadi:\n\n```javascript\nandroid:theme=\"@android:style/Theme.NoTitleBar\"\n```\n\n## Memasukkan HTML\n\nUntuk memasukkan file HTMLnya, salin folder yang berisi HTML (pastikan ada `index.html` ya...) ke root dari APK Builder kemudian remake foldernya menjadi `assets`.\n\n## Mengubah icon aplikasi\n\nSalin gambar icon aplikasi ke `res/midmap-xhdpi` lalu rename gambarnya menjadi `ic_launcher.jpg` atau `ic_launcher.png`, disesuaikan aja sama ekstensi gambarnya. Kalau PNG ya tetap PNG. Kalau JPG ya tetap JPG.\n\n> Kalau sudah, klik tombol **Build** yang ada di kanan atas.",
      "slug": "membuat-apk-dari-html",
      "id": 23
    },
    {
      "judul": "Tentang belajar mandiri",
      "deskripsi": "Menerapkan sistem perkuliahan secara mandiri",
      "isi": "> **TL;DR** Banyak membaca\n\nApakah itu belajar? Mengapa kita terus harus belajar padahal usia telah senja? Mengapa orang yang sudah dewasa terus saja belajar hingga S3? Tidakkah cukup pelajaran di pendidikan dasar kita? Apakah tidak rugi waktu yang dihabiskan untuk belajar?\n\nRasul bersabda:\n\nاطلب العلم من المهد إلى اللهد\n\n_Tuntutlah ilmu dari kelahiran hingga kematian_\n\nطلب العلم فريضة على كل مسلم\n\n_Menuntut ilmu wajib bagi setiap muslim_\n\nAdapun ilmu yang wajib dipelajari adalah ilmu agama karena dengan dialah kita hidup dan dengan dia pulalah kita menelusuri alam kematian kelak. Namun, menuntut atau mempelajari ilmu dunia juga nggak salah karena dengan ilmu dunia yang kita pelajari ini lah kita bisa berbuat kebaikan kepada sesama. Misalnya saja kita mempelajari ilmu psikologi, lalu dengan ilmu yang kita miliki itu bisa membuat banyak orang menjalani kehidupan dengan semangat, jauh dari pikiran ingin bunuh diri, lepas dari stres, trauma, fobia, dan kecemasan lainnya. Atau, misalnya aja kita punya ilmu kedokteran. Lalu, dengan ilmu itu, kita membantu banyak orang untuk hidup sehat, hidup yang penuh semangat, selalu penuh dengan pikiran positif. Bukankah itu semua baik?\n\nNah, tentu saja harus ada ilmunya untuk bisa membantu orang lain. Setidaknya kan, kepala ini ada isinya gitu loh. Kalau nggak ada isinya, kita nggak kepikiran untuk melakukan kebaikan kepada sesama. Maka, kita harus banyak **membaca** supaya kita memiliki ilmu yang dengan ilmu itu kita bisa membantu orang lain. Apalagi kan di masa pandemi seperti ini, kita nggak bisa bertemu dengan guru secara langsung, segalanya serba online. Di kampus-kampus aja pembelajarannya secara online. Sehingga, ilmu yang didapatkan itu nggak bisa semaksimal seperti kita bertemu langsung tatap muka menimba ilmu dengan guru. \n\nMaka, keaktifan setiap mahasiswa itu diperlukan untuk memperkaya wawasannya akan ilmu yang dimilikinya. Maka, buku itu penting untuk banyak dibaca, nggak usah dilihat seberapa tebal buku yang sedang dibaca. Entah itu bukunya tipis atau tebal, asalkan bermanfaat, maka itu lebih baik daripada kita memiliki koleksi buku sebanyak perpustakaan daerah tapi nggak nggak pernah dibaca.",
      "slug": "tentang-belajar-mandiri",
      "id": 24
    },
    {
      "judul": "Import component di HTML",
      "deskripsi": "Ternyata bisa! Hahahaha....",
      "isi": "Import component artinya adalah kita memasukkan `sidebar.html`, `footer.html`, dan ,`header.html` ke dalam `index.html`. Bisa kah ya? Kalau dulu, aku pengen banget melakukan itu tapi nggak tau bagaimana caranya. Hingga akhirnya, ada sebuah postingan yang dishare sama Bang Rian di [grup Telegram JavaScript Indonesia](https://t.me/js_id) yang memberi tau caranya seperti ini:\n\nMisal, kita memiliki komponen `sidebar.html` yang mau diexport ke `index.html`, maka, di `index.html`, kita buat elemen seperti ini:\n\n```html\n<bagian-sidebar></bagian-sidebar>\n```\n\nAneh banget kan ya? Tag HTML `<bagian-sidebar>` kan nggak pernah ada. Lalu, kita menggunakannya? Ya memang tujuannya itu sih, kita menuliskan tag HTML yang nggak pernah ada supaya nggak bentrok dengan tag HTML yang sudah ada.\n\nOke, kita lanjutkan codingnya. Tadi kan kodenya seperti ini:\n\n```html\n<bagian-sidebar></bagian-sidebar>\n```\n\nKemudian, kita tambahkan script untuk mengimport komponen `sidebar.html`:\n\n```html\n<bagian-sidebar></bagian-sidebar>\n<script>\n fetch(\"sidebar.html\").then(x => x.text()).then(x => document.querySelector(\"bagian-sidebar\").innerHTML = x)\n</script>\n```\n\nAku ngelihat script di atas ketawa eh. Ya benar sih bisa import HTML dengan cara Fetch. Aku nggak kebayang dari dulu eh. Dari dulu bingung aja gimana caranya import HTML tanpa ada usaha nyari jawabannya. Eh, sekarang malah nemukan jawabannya tepat di depan mata. Hehehhehe...\n\n## Kelemahan include HTML\n\nKalau kita lihat dari contoh di atas, scriptnya hanya bisa sekadar include aja tanpa bisa menggunakan _attribute_ dan _slot_. Nah, dua elemen ini adalah sesuatu yang penting jika bermain dengan komponen. Akan tetapi, di teknik yang kusebutkan di atas tadi, nggak bisa pakai attribute dan slot. Maka, kita pun harus menggunakan teknik lainnya.",
      "slug": "import-component-di-html",
      "id": 25
    },
    {
      "judul": "Apa saja yang bisa kamu lakukan dalam sejam?",
      "deskripsi": "Kalau kita fokus...",
      "isi": "Berapa waktu yang kita miliki dalam sehari?\n\n```go\npackage main\nimport \"fmt\"\nfunc main(){\n tidur := 8\n waktu := 24 - tidur\n fmt.Println(waktu)\n // hasil: 16\n}\n```\n\nKalau dari logika di atas kan, kita punya 16 jam dalam seharinya untuk aktif bekerja dan melakukan kegiatan apapun. Jika satu jam itu diibaratkan dengan satu slot, maka, kita punya 16 slot dalam sehari semalam untuk aktif melakukan sesuatu.\n\nNah, sekarang pertanyaannya adalah dalam satu jam itu kita bisa ngapain aja? Pertama, aku bertanya kepada kawan-kawan di grup WhatsApp Sanggar Baca Caraka. Di situ, [Mbak Nimas](https://www.nimasachsani.my.id/?m=1) menjawab:\n\n> Tergantung mas\n> Aku JK Rowling/Dan Brown, sehari bisa +- 500 halaman (tanpa distraksi)\n\nWeh. Dalam satu hari bisa membaca 500 halaman. Itu jumlah yang sangat besar\n\nLalu, kalau membaca Qur'an, berdasarkan pengalaman kawan-kawan di [Ma'had Tahfidzul Qur'an Isy Karima](https://isykarima.com/), dalam sejam bisa membaca dua juz, baik itu secara nadzar (melihat Quran) maupun bil gaib (tanpa melihat Quran). Maka, dalam sehari, bisa **mengkhatamkan Quran**! Hebat banget ya. Kita aja kadang sebulan nggak mesti khatam. Khatam Qurannya cuma kalau bulan Ramadan aja. Eh ternyata kalau kita fokus dalam membaca Qur'an, sehari aja bisa khatam.\n\nKalau menulis buku, menurut Mbak Dede:\n\n> Saya cuma 350 kata, Kak...\n\nBeh. 350 kata itu setara dengan 1 halaman buku. Maka, dalam satu hari, kita bisa menulis buku sebanyak **8 lembar**!\n\nJadi, kalau kita kumpulkan tu seperti ini:\n\n**_Kalau sehari aja fokus..._**\n\n| Kegiatan | Kuantitas |\n|---|---|\n| Membaca | 500 halaman |\n| Ngaji | Khatam |\n| Menulis | 8 lembar |\n\nSungguh pencapaian yang sangat luar biasa jika kita bisa sehari aja fokus untuk melakukan salah satu dari kegiatan di atas.\n\n## Kalau kita fokus\n\nTerlihat dari survey kecil-kecilan di atas, kalau kita bisa fokus, maka banyak hal yang bisa kita lakukan. Kita lihat aja deh, betapa susahnya kita mengkhatamkan Quran selama bulan Ramadan. Padahal, kalau kita fokus aja, sebentar aja ternyata mengkhatamkan Quran. Atau, kita mengeluh betapa susahnya mengkhatamkan bacaan buku. Padahal, kalau fokus, bisa 500 halaman kita baca dalam sehari!\n\n## Kisah tentang ulama dan kefokusannya\n\nAku teringat dengan salah seorang ulama yang dia itu fokus banget dengan menuntut ilmu. Aku lupa namanya siapa, soalnya aku Googling belum ketemu. Ntar kasih tau ya kalau kamu tau siapa namanya.\n\nNah, ulama ini saking semangatnya menuntut ilmu, dia nggak pernah mau lepas dari membaca. Apalagi kan yang dipelajarinya itu adalah ilmu agama yang merupakan suatu kebutuhan oleh semua orang, maka, ulama ini makin semangat lagi dalam mempelajarinya. \n\nNah, saking semangatnya dalam belajar, beliau sampai mandi aja, minta ke santrinya buat bacakan kitab yang sedang dipelajarinya itu dari luar kamar mandi. Kan, yang namanya kitab itu nggak boleh dibawa ke kamar mandi. Alasannya ya, _1_) untuk menghormati kitab, _2_) kalau ada ayat Qur'an, nggak mendapat murka dari Allah karena membawa ayat-Nya ke kamar mandi.\n\nKemudian, untuk makan aja, beliau nggak makan kayak kita ni. Jadi, makanannya itu dibuatnya jadi bubur. Sehingga, waktu untuk mengkonsumsi makanan itu jadi lebih cepat. Sebegitunya ya saking nggak mau lepasnya sama ilmu.\n\n## Ilmu dan kebangkitan Islam\n\nAda suatu ulasan menarik di Youtubenya [Inspect History](https://youtu.be/tIZgdmFzt4A) tentang sebab-sebab yang membuat Islam menjadi jaya pada zamannya itu. Jadi, di situ dijelaskan bahwa yang membuat Islam menjadi jaya adalah betapa perhatiannya pada Khalifah kepada ilmu. Di situ diceritakan tentang Khalifah Harun Ar-Rasyid yang mendirikan Baitul Hikmah atau rumah kebijaksanaan, tempat di mana setiap ilmuan di seluruh penjuru dunia menyalurkan ilmunya di situ. Mereka saling berdiskusi, menelaah, membaca, dan menulis. Kemudian, dilanjutkan oleh Khalifah Makmun yang semakin gencar menerjemahkan manuskrip Yunani dan Romawi ke dalam bahasa Arab. Karena berkembangnya ilmu itulah, semakin jaya juga kekhalifahan pada masa itu.\n\nNah, berarti kan ketika kita semua mampu membaca lebih banyak buku, **menulis** lebih banyak lagi, kita semua bisa menyumbangkan peninggalan kita ini untuk mengembalikan kejayaan di muka bumi ini, di mana nggak ada lagi kebodohan, kelaparan, dan penindasan.",
      "slug": "apa-saja-yang-bisa-kamu-lakukan-dalam-sejam",
      "id": 26
    },
    {
      "slug": "sop-revisi-layout",
      "judul": "SOP revisi layout",
      "deskripsi": "Panduan buat para penulis",
      "isi": "1. Penulis memberikan naskahnya kepada layouter\n2. Layouter memberikan naskah yang sudah dilayout kepada penulis dengan format DOC \n3. Penulis merevisi (kalau ada yang mau direvisi) dalam bentuk memberikan komentar seperti contoh di bawah ini:\n\n ![Contoh comment di Word](https://i.ibb.co/Z26D1K0/1597148063066-1597148053249-0-IMG-20200811-WA0042.jpg)",
      "id": 27
    },
    {
      "judul": "Keikhlasan di segala hal",
      "deskripsi": "Untuk apa bekerja?",
      "isi": "The Ancient One berkata kepada Dr. Strange:\n\n> Lupakan segala hal yang kamu percaya\n\nAkan tetapi, Dr. Strange nggak begitu saja menurut karena memang dia itu pintar dan memiliki pengetahuan yang banyak akan segala sesuatu. Maka, mungkin di batinnya adalah: _Apa yang akan mengejutkanku? Aku sudah tau semuanya_. Tapi ternyata Dr. Strange salah. Dia benar-benar nggak siap buat menerima _kenyataan_ sesungguhnya dari dunia ini. Masih banyak universe yang belum terjelajahi.\n\nNamun, bukan Dr. Strange namanya kalau nggak siap **menerima perubahan**.",
      "slug": "keikhlasan-di-segala-hal",
      "id": 28
    },
    {
      "judul": "Membuat server SPA dengan Go",
      "deskripsi": "Server Go untuk framework Javascript",
      "isi": "Dunia pemrograman website saat ini mengenal ada dua kutub utama yaitu dunia backend dan dunia frontend. Dunia backend adalah mengatur logika bisnis suatu aplikasi, apakah dia harus ditambah, dikurang, modulus, koneksi database A, atur transaksi kartu kredit dengan API bank B, dan begitu seterusnya. Sedangkan kalau dunia frontend, mengatur tampilan website kepada user. Nah, kalau di frontend ini lagi ramai yang namanya framework Javascript seperti Vue dan Angular, library Javascript seperti React, dan compiler Javascript seperti Svelte. Satu hal yang membuat khas dari berbagai teknologi frontend Javascript ini adalah penggunaan router untuk pengelolaan halaman-halamannya. Jadi, misalnya kita melihat di URL:\n\n- situs.com\n- situs.com/hello-world\n- situs.com/guesbook\n\nDan segala macamnya, itu sebenarnya hanya satu file `index.html` yang memberikan tampilan halaman yang berbeda-beda sesuai dengan URL yang muncul. Jadi, semua halaman di satu website, ittu semua ditumpuk di satu buah file `index.html`. Itulah yang namanya SPA (single page application). Keunggulan dari SPA ini adalah website menjadi lebih cepat dan transisi antar halamannya terasa lebih halus karena ya sebenarnya yang dibuka itu cuma satu file aja, yaitu `index.html`. Dan ketika kita klik-klik, yang seolah-olah berpindah halaman itu ya sebenarnya masih di `index.html` aja dan yang berubah hanya tampilannya, menyesuaikan dengan URLnya. Keren ya? Nah, sekarang kita akan bahas cara membuat servernya dengan Go.\n\nJadi, kita akan membuat server static file yang memiliki fitur SPA. Pertama, pastikan dulu kamu sudah punya Go ya. Kalau belum, install dulu. Monggo dicari di Google, gimana cara installnya.\n\nLalu, jalankan perintah berikut:\n\n```bash\ngo get github.com/roberthodgen/spa-server\n```\n\nItu fungsinya adalah untuk mendownload library Go bernama SPA Server yang dibuat oleh roberthodgen. Kenapa kita perlu library ini? Ya karena di library ini ada fitur untuk membuat sebuah server Go menjadi SPA, artinya, apapun URLnya, yang dibuka ya hanya `index.html`.\n\nKemudian, kita buat `server.go` yang isinya:\n\n```go\npackage main\nimport (\n\t\"net/http\"\n\t\"fmt\"\n\tspa \"github.com/roberthodgen/spa-server\"\n)\nfunc main(){\n\tfmt.Println(\"Buka localhost:2020\")\n\thttp.ListenAndServe(\":2020\", spa.SpaHandler(\"public\", \"index.html\"))\n}\n```\n\nMaksud dari kode di atas adalah, _apapun URL yang terbuka_ yang diakses oleh server, tetap `public/index.html`. Lalu, file tersebut dijalankan di `localhost:2020`.\n\nKemudian, jalankan perintah:\n\n```bash\ngo build server.go\n```\n\nMaka, akan tercipta file `server` yang merupakan hasil compile dari script Go tadi. Nah, ini nggak perlu pakai Go lagi untuk menjalankan. Tinggal dijalankan dengan `./server`.",
      "slug": "membuat-server-spa-dengan-go",
      "id": 29
    },
    {
      "judul": "Betapa uniknya hafalan Quran",
      "deskripsi": "Mengapa kita tidak memulainya?",
      "isi": "Menghafal Quran itu unik. Mungkin pas awal-awal kita mencobanya, akan terasa berat. Namun, jika kita terus saja konsisten dalam melakukannya, seolah-olah Al-Quran membuka diri terhadap kehadiran kita sehingga akan semakin mudah dalam menghafal. Jadi, memang ya kuncinya itu adalah konsisten.\n\nCoba deh diingat lagi dengan suatu mahfuzhot yang mengatakan:\n\nمن سار على الدرب وصل\n\n_Barang siapa yang menempuh suatu jalan, maka ia akan sampai_.\n\nMaka sebenarnya nggak peduli sesusah apapun, seberat apapun jalan yang ditempuh. Asalkan kita masih menempuh jalan yang tepat, maka, pasti akan sampai ke tujuan. Begitu pula dengan menghafal Quran. Jalan untuk mencapai hafalan yang sempurna adalah:\n\n- Rajin menyetorkan hafalan di halaqah Quran\n- Rajin memurajaah hafalan yang dimiliki\n- Berdoa untuk disempurnakan hafalannya\n\nKalau kita menempuh jalan yang benar tersebut, maka kita akan sampai kepada tujuan.",
      "slug": "betapa-uniknya-hafalan-quran",
      "id": 30
    },
    {
      "judul": "PNPM sebagai pengganti NPM",
      "deskripsi": "Package manager yang terpusat",
      "isi": "Node JS memiliki sistem manajemen paket yang bernama NPM. Nah, NPM ini akan mendownload paket yang kamu butuhkan beserta dengan paket-paket yang dibutuhkan oleh paket yang kamu butuhkan tadi. Hahahaha...\n\nAnaloginya seperti ini, kamu membutuhkan sebuah paket yang bernama _kue_ (1 MB). Nah, _kue_ ini membutuhkan paket-paket lainnya berupa:\n\n- adonan (1 MB)\n- krim (2 MB)\n- hiasan (1 MB)\n\nTotal dari instalasi paket _kue_ adalah 5 MB.\n\nKemudian, kita akan instalasi paket _kue_ juga di folder lainnya. Otomatis, terdownload lagi 5 MB tadi. Kan boros. Kalau dengan PNPM, semuanya terpusat. Artinya, yang dipasang di project kita cuma yang kita butuhkan aja, yaitu _kue_, sedangkan untuk adonan, krim, dan hiasan, semuanya di root laptop kita. Nah, kalau gini kan jadinya lebih kecil ukuran `node_modules` nya dan lebih hemat internet juga karena yang belum ada di root aja yang didownload. Kalau sudah ada, dia cuma ngelink ke root aja.\n\n## Instalasi\n\nUntuk instalasi, pertama, jalankan script berikut:\n\n```bash\nnpm i -g pnpm\n```\n\nKalau sudah, di-update PNPMnya dengan perintah berikut:\n\n```bash\npnpm add -g pnpm\n```\n\n## Perbandingan perintah\n\nPerintah PNPM sebenarnya kurang lebih aja sih sama NPM. Tabel di bawah ini menunjukkan perbedaanya yang sangat kecil sekali:\n\n| NPM | PNPM |\n|---|---|\n| `npm init -y` | `pnpm init -y` |\n| `npm i` | `pnpm install`|\n| `npm i hello` | `pnpm add hello` |\n| `npm i -g hai` | `pnpm add -g hai` |\n\nNah, kalau kamu mau migrasi dari project yang menggunakan NPM ke penggunaan PNPM, pastikan dulu kamu sudah hapus folder `node_modules`. Setelah itu, jalankan:\n\n```bash\npnpm install\n```",
      "slug": "pnpm-sebagai-pengganti-npm",
      "id": 31
    },
    {
      "judul": "Membuat server SPA dengan Javascript",
      "deskripsi": "Sekarang dengan Javascript",
      "isi": "Setelah sebelumnya aku menjelaskan tentang [cara membuat server SPA dengan Go](/membuat-server-spa-dengan-go), sekarang kita buat dengan Javascript.\n\nOh iya, kode di sini aku copas dari Google. Yang penting sih kita paham aja cara kerjanya.\n\nPertama, kita install dulu Express dengan [PNPM](/pnpm-sebagai-pengganti-npm):\n\n```bash\npnpm add express\n```\n\nBaru setelah itu, kita buat file `server.js` yang isinya:\n\n```javascript\n/*\n  Incredibly simple Node.js and Express application server for serving static assets.\n\n  Given as an example from the React Router documentation (along with examples\n  using nginx and Apache):\n  - https://github.com/ReactTraining/react-router/blob/master/docs/guides/Histories.md#browserhistory\n*/\n\nconst express = require('express');\nconst path = require('path');\nconst port = process.env.PORT || 2020\nconst app = express();\n\n// serve static assets normally\napp.use(express.static(__dirname + '/'));\n\n// handle every other route with index.html, which will contain\n// a script tag to your application's JavaScript file(s).\napp.get('*', function (request, response) {\n  response.sendFile(path.resolve(__dirname, 'index.html'));\n});\n\napp.listen(port);\nconsole.log(\"server started on port \" + port);\n```\n\nUntuk menjalankannya, cukup dengan perintah:\n\n```bash\nnode server.js\n```\n\nNanti, situsnya bisa dibuka di `localhost:2020`.",
      "slug": "membuat-server-spa-dengan-javascript",
      "id": 32
    },
    {
      "judul": "Cek repositori JS.ORG yang tidak aktif",
      "deskripsi": "Beres-beres list JS.ORG",
      "isi": "Semalam (29/9/2020) aku kepikiran dengan beberapa website berdomain [JS.ORG](/membuat-domain-gratis-jsorg) yang 404 not found, alias, kalau dibuka linknya ya nggak ada isinya. Akhirnya, aku kepikiran untuk membuat script yang bisa melacak website mana aja yang kosong.\n\nPertama, tentu aja aku memilih bahasa pemrograman yang paling _mudah_ untuk membuatnya. Kemudian, aku memilih antara JavaScript, Python, Ruby, dan Go. Dan kayaknya sudah jelas sih bahwa aku akan memilih JavaScript. Hehehhehe... Soalnya cuma bahasa itu aja sih yang udah paling nyaman di aku. Hehehhe...\n\nNah, sekarang, kita buat logika pemrogramannya. Pertama kan, kita ambil dulu data yang berisi semua domain JS.ORG. Lalu, cek repositorinya, apakah ketika dibuka, di bagian `<title>` ada tulisan `Page not found` apa nggak. Kalau ada, kita masukkan list. Sesimpel itu.\n\n## Persiapan\n\nPertama, init dulu foldernya dengan [PNPM](/pnpm-sebagai-pengganti-npm):\n\n```bash\npnpm init -y\n```\n\nKemudian, install `node-fetch`:\n\n```bash\npnpm add node-fetch\n```\n\n## Mulai coding!\n\nBuat `index.js` yang isinya:\n\n```javascript\nfetch = require('node-fetch')\nfs = require('fs')\n// data = 'http://localhost:2020/cnames_active.js'\ndata = 'https://raw.githubusercontent.com/js-org/js.org/master/cnames_active.js'\nfetch(data).then(x => x.text()).then(x => {\n\teval(x)\n\tdata = []\n\tfor (n in cnames_active){\n\t\tdata.push({\n\t\t\t'id': n,\n\t\t\t'github_pages': cnames_active[n],\n\t\t\t'repo': ''\n\t\t})\n\t}\n\tfor (x of data){\n\t\tif (x.id == ''){\n\t\t\tx.id = 'js.org'\n\t\t}\n\t}\n\tfor (x of data){\n\t\tif (x.github_pages.includes('github.io')) {\n\t\t\tpisah = x.github_pages.split('/')\n\t\t\tx.repo = `${pisah[0].replace('.github.io', '')}/${pisah[1] ? pisah[1] : pisah[0]}`\n\t\t}\n\t}\n\tkosong = []\n\tfs.writeFile('hasil.txt', '', () => {})\n\tangka = 0\n\tjalankan = () => {\n\t\tfetch(`https://github.com/${data[angka].repo}`).then(z => z.text()).then(hasil => {\n\t\t\tconsole.log(`Cek ${data[angka].repo}`)\n\t\t\tif (hasil.includes('<title>Page not found')) {\n\t\t\t\tkosong.push('\\n' + 'https://github.com/' + data[angka].repo)\n\t\t\t}\n\t\t\tfs.writeFile('hasil.txt', kosong, () => {})\n\t\t\tangka += 1\n\t\t\tif (angka < data.length){\n\t\t\t\tjalankan()\n\t\t\t}\n\t\t})\n\t}\n\tjalankan()\n})\n```\n\n## Hasilnya\n\nBerikut ini hasilnya setelah aku jalankan `node index.js`:\n\n```javascript\nhttps://github.com/js-org/js-org.github.io,\nhttps://github.com/afexteam/aemp,\nhttps://github.com/agrawalnaman/agrawalnaman.github.io,\nhttps://github.com/algninja/algninja.github.io,\nhttps://github.com/am-77/amine,\nhttps://github.com/ardasoyturk/ardasoyturk.github.io,\nhttps://github.com/asdivyansh/asdivyansh.github.io,\nhttps://github.com/sawyerbx/atom-git-docs,\nhttps://github.com/basicgame/basicGame.js,\nhttps://github.com/purpzie/birb.js.org,\nhttps://github.com/black-fury/black-fury.github.io,\nhttps://github.com/zam27/blogzam,\nhttps://github.com/discordboats/discordboats.github.io,\nhttps://github.com/fardindadev/bonzibuddy,\nhttps://github.com/beeyev/btgprice.org,\nhttps://github.com/cagataycali/cagataycali.github.io,\nhttps://github.com/bbyjins/candy,\nhttps://github.com/iamnapo/cbmjs,\nhttps://github.com/diegomagdaIeno/Chr1stmas,\nhttps://github.com/chrismendis/chrismendis.github.io,\nhttps://github.com/marekkobida/christopher,\nhttps://github.com/city/city.github.io,\nhttps://github.com/clarkdo/clarkdo.github.io,\nhttps://github.com/schoolhouserock/CollegeQuest,\nhttps://github.com/gleeny/countr-redirect,\nhttps://github.com/realalexsss/CustomRPC,\nhttps://github.com/chroventer/discordutil,\nhttps://github.com/megacode18/discunit.js,\nhttps://github.com/relms12345/Dislink,\nhttps://github.com/dougg0k/dougg0k.github.io,\nhttps://github.com/martondev/dpm,\nhttps://github.com/dromejs/drome.js.org,\nhttps://github.com/orbitalproject/dyn-client,\nhttps://github.com/andreapins/Efemerides,\nhttps://github.com/engui/engui.github.io,\nhttps://github.com/frani/fem,\nhttps://github.com/ikrydev/fikri.js.org,\nhttps://github.com/sirajchokshi/FlowPainter,\nhttps://github.com/netology-group/foxford.github.io,\nhttps://github.com/egoist/funbook,\nhttps://github.com/chaudhs769/girish.js.org,\nhttps://github.com/jottocraft/surf,\nhttps://github.com/assetinfo/assetinfo.github.io,\nhttps://github.com/grubburg/blog,\nhttps://github.com/guineapigbot/guineapigbot.github.io,\nhttps://github.com/guuibayer/guuibayer.github.io,\nhttps://github.com/tbnritzdoge/helperweb,\nhttps://github.com/hiteshsubnani0128/hiteshsubnani,\nhttps://github.com/hifocus/www.hxis.me,\nhttps://github.com/iiilfaaa/iiilfaaa.github.io,\nhttps://github.com/iiilfaaa/www,\nhttps://github.com/ionjs-dev/ionjs-dev.github.io,\nhttps://github.com/irjs/docs,\nhttps://github.com/sinistrecyborg/Ivy,\nhttps://github.com/sawyerbx/james,\nhttps://github.com/json-schema-faker/website-jsf,\nhttps://github.com/jz6/jz6.github.io,\nhttps://github.com/fed135/kalm.github.io,\nhttps://github.com/thecodesuite/katebot,\nhttps://github.com/jasperv/keeping-up-with-javascript,\nhttps://github.com/naveenjujaray/jksblog,\nhttps://github.com/kiliczsh/kiliczsh.github.io,\nhttps://github.com/khareemnurulla/kim,\nhttps://github.com/kunalghosh02/kunalghosh02.github.io,\nhttps://github.com/kyotojs/kyotojs.github.io,\nhttps://github.com/palladium/Lava.js,\nhttps://github.com/laveesh/laveesh.github.io,\nhttps://github.com/leipzigjs/leipzigjs.github.io,\nhttps://github.com/leoaj/leoaj.github.io,\nhttps://github.com/lf112/lf112.github.io,\nhttps://github.com/lmribeiro/lmribeiro.github.io,\nhttps://github.com/mahdyar/mahdyar.js.org,\nhttps://github.com/botsdemanu/manu,\nhttps://github.com/matthias-schuetz/matthias-schuetz.github.io,\nhttps://github.com/megacode18/megacode18.github.io,\nhttps://github.com/miteshtagadiya/miteshtagadiya,\nhttps://github.com/rolandpoulter/murder,\nhttps://github.com/naveenjujaray/blog,\nhttps://github.com/eliotchignell/NBABot,\nhttps://github.com/nemaniarjun/nemaniarjun.github.io,\nhttps://github.com/netology-group/netology-group.github.io,\nhttps://github.com/nmai/nmai.github.io,\nhttps://github.com/nintenzone/NintenBot,\nhttps://github.com/baleeds/nota,\nhttps://github.com/okb1100/okb1100.github.io,\nhttps://github.com/mountainwang/ohmy,\nhttps://github.com/jczimm/omega,\nhttps://github.com/passportbot/Website,\nhttps://github.com/sawyerbx/pw,\nhttps://github.com/nathan/pax,\nhttps://github.com/iamcristye/PDF,\nhttps://github.com/pekanbarujs/pekanbarujs.github.io,\nhttps://github.com/kaisteinke/perle,\nhttps://github.com/xiaopika/pika.js.org,\nhttps://github.com/pixxel/pixxel.github.io,\nhttps://github.com/meshesha/jspptxjs.github.io,\nhttps://github.com/project-ignite/project-ignite.github.io,\nhttps://github.com/gleeny/promise-redirect,\nhttps://github.com/purpzie/site,\nhttps://github.com/sawyerbx/quotes,\nhttps://github.com/randyviandaputra/randyviandaputra.github.io,\nhttps://github.com/sawyerbx/renovate,\nhttps://github.com/eton4446/Reply,\nhttps://github.com/saguijs/saguijs.github.io,\nhttps://github.com/sanohin/sanohin.github.io,\nhttps://github.com/codedrs/secret-santa,\nhttps://github.com/mrfarhad/senilwebsite,\nhttps://github.com/mayerdev/md-server-core,\nhttps://github.com/shekharreddy4/Shekhar,\nhttps://github.com/shermix/shermix.github.io,\nhttps://github.com/jsmiith/shortener,\nhttps://github.com/shs-coding-club-projects/shs-coding-club-projects.github.io,\nhttps://github.com/chaudhs769/siddharth.js.org,\nhttps://github.com/3052cole/snowglobe,\nhttps://github.com/solome/solome.github.io,\nhttps://github.com/sonnylazuardi/sonnylazuardi.github.io,\nhttps://github.com/soofik/soofik.github.io,\nhttps://github.com/sawyerbx/spotix,\nhttps://github.com/sawyerjs/sqrvival,\nhttps://github.com/stampylongr/stampylongr.github.io,\nhttps://github.com/janbiasi/supernova,\nhttps://github.com/technologyadvice/tap-flux,\nhttps://github.com/taylorreis/taylorreis.github.io,\nhttps://github.com/theshellproject/theshellproject.github.io,\nhttps://github.com/sawyerbx/titlejs,\nhttps://github.com/ttttmr/ttttmr.github.io,\nhttps://github.com/jottocraft/tp,\nhttps://github.com/wr1ght/trellojs,\nhttps://github.com/trevorgk/trevorgk.github.io,\nhttps://github.com/marcus-sa/trinity-js,\nhttps://github.com/turbo/turbo.github.io,\nhttps://github.com/umm233/umm233.github.io,\nhttps://github.com/iamcristye/Uneditable.js,\nhttps://github.com/url-pages/url-pages.github.io,\nhttps://github.com/use-js/use,\nhttps://github.com/misly16/ValoBotsite,\nhttps://github.com/vecxode/vecxode.github.io,\nhttps://github.com/viki-org/viki-web-ui,\nhttps://github.com/bryansha/wc,\nhttps://github.com/w-gx/w-gx.github.io,\nhttps://github.com/sy-records/wstool,\nhttps://github.com/sawyerbx/wthunting,\nhttps://github.com/xhy/xhy.github.io,\nhttps://github.com/yadljs/yadljs.github.io,\nhttps://github.com/yakeing/HexoBlog,\nhttps://github.com/ssttii/ssttii.github.io,\nhttps://github.com/zeainc/zea-cad,\nhttps://github.com/zeainc/zea-engine,\nhttps://github.com/wzb1244/wzb1244.github.io,\nhttps://github.com/zlanguage/plugin-docs\n```\n\nKemudian, list ini aku masukkan ke [#4718 js-org/js.org](https://github.com/js-org/js.org/issues/4718).",
      "slug": "cek-repositori-jsorg-yang-tidak-aktif",
      "id": 33
    },
    {
      "judul": "Balik kata dengan Javascript",
      "deskripsi": "Dengan Node JS",
      "isi": "```javascript\nreadline = require(\"readline\")\nrl = readline.createInterface({\n\tinput: process.stdin,\n\toutput: process.stdout\n})\njalankan = () => {\n\trl.question(\"Nama: \", nama => {\n\t\tconsole.log(nama.toLowerCase().split(\"\").reverse().join(\"\"))\n\t\tjalankan()\n\t})\n}\njalankan()\n```\n\n```javascript\nNama: zuhdi\nidhuz\nNama: habib\nbibah\nNama: syamil\nlimays\nNama: firman\nnamrif\nNama: azzam\nmazza\nNama: $\n$\nNama: π¥•£\n£•¥π\nNama: namrif\nfirman\nNama: hitaf\nfatih\nNama: hitam\nmatih\nNama: biru\nurib\nNama: merah\nharem\n```",
      "slug": "balik-kata-dengan-javascript",
      "id": 34
    },
    {
      "judul": "Cara install NVM versi 12.1.0",
      "deskripsi": "Tools buat manajemen versi Node JS",
      "isi": "Salah satu yang menjadi kekurangan laptop dengan arsitektur OS 32 bit adalah kesusahan untuk menggunakan software versi terbaru. Salah satunya adalah Node JS karena dukungan versi terbaru Node JS hanya untuk arsitektur OS 64 bit sedangkan untuk 32 bit hanya sampai versi 8.\n\n```bash\nnvm install 12.1.0\nnvm use 12.1.0\nnvm alias default 12.1.0\n```",
      "slug": "cara-install-nvm-versi-1210",
      "id": 35
    },
    {
      "judul": "Contoh async/await",
      "deskripsi": "Mengatasi callback hell",
      "isi": "Javascript terkenal dengan nonblocking IO. Artinya, kalau di Javascript itu, nggak perlu menunggu satu proses sempurna dulu baru lanjut ke proses berikutnya (blocking IO). Jadi, Javascript itu menjalankan segala script di dalamnya itu secara paralel kecuali beberapa sintaks Javascript zaman dulu (sintaks bahari) yang memang secara berurutan, tapi dia nggak berhubungan sama IO. Misalnya aja script di bawah ini:\n\n```javascript\nnama = prompt(\"Siapa namamu?\")\nalert(nama)\n```\n\nKebanyakan, sintaks Javascript itu seperti ini:\n\n```javascript\nfetch('situs.com').then(x => x.json()).then(y => console.log(y))\n```\n\nAtau, untuk lebih memudahkan dalam pemahaman konsepnya, kita buat sintaksnya seperti ini:\n\n```javascript\nfetch('situs.com').then(x => {\n\tx.json()\n}).then(y => {\n\tconsole.log(y)\n})\n```\n\nJadinya, bersarang kan ya?\n\nJadinya, kita nggak bisa langsung mengakses variabel `x` sebelum melalui callback yang pertama. Lalu, nggak bisa mendapatkan nilai dari `y` sebelum melalui callback 1 dan 2.\n\nMaka, solusinya adalah menggunakan async/await. Sintaksnya itu seperti ini jika kita menggunakan contoh di atas tadi:\n\n```javascript\ntes = async () => {\n\tx = await fetch('situs.com')\n\ty = await x.json()\n\tconsole.log(y)\n}\ntes()\n```\n\n## Pembahasan lebih lanjut\n\nSekarang, kita pecah dulu script di atas yang memiliki callback (`.then`) yaitu:\n\n| Sintaks | Hasil |\n|---|---|\n| fetch('situs.com') | x |\n| x.json() | y |\n\nNah, dari tabel di atas, kita sudah dapat bayangan `await` seperti ini:\n\n```javascript\nfetch('situs.com') -> x\nx.json() -> y\n```\n\nKemudian, kita pindah hasil callbacknya ke depan, lalu tambahkan tulisan `await`:\n\n```javascript\nx = await fetch('situs.com')\ny = await x.json()\n```\n\nLalu, tambahkan perintah yang nggak menghasilkan callback:\n\n```javascript\nx = await fetch('situs.com')\ny = await x.json()\nconsole.log(y)\n```\n\nNah, baru di endingnya ditutup dengan fungsi yang `async`:\n\n```javascript\ntes = async () => {\n\tx = await fetch('situs.com')\n\ty = await x.json()\n\tconsole.log(y)\n}\ntes()\n```",
      "slug": "contoh-async-await",
      "id": 36
    },
    {
      "judul": "Memperbarui generator website ini",
      "deskripsi": "Sekarang, pakai JavaScript!",
      "isi": "Kalau di [generator sebelumnya](/sistem-di-balik-blog-ini), aku menggunakan Python untuk mengolah konten blog ini yang berupa:\n\n1. Clone `index.html`\n2. Generate `sitemap.xml`\n3. Membuat JSON tiap konten\n\nKemudian, aku refaktori kodenya ke bahasa JavaScript karena pengennya sih [repositori blog ini](https://github.com/mzaini30/blogzen) full menggunakan Javascript dan juga, kalau aku menggunakan Javascript, lebih mudah maintenance-nya karena APInya sudah banyak aku tau dan karena sintaksnya C-like, enak buat copas kode. Hehehhehe... Kalau aku pakai Python, susah copasnya karena bakalan banyak mencet tab. Hehehhee... Oke, langsung kita bahas aja.\n\n## Tentang Clone `index.html`\n\nClone `index.html` berfungsi untuk menyalin file `index.html` menjadi slugnya masing-masing konten. Misalnya aja, aku punya konten-konten yang memiliki slug: \n\n1. hello-world\n2. makan-nasi-enak\n3. coba-sekarang\n\nMaka, script akan menyalin `index.html` dan membuat file-file:\n\n1. hello-world.html\n2. makan-nasi-enak.html\n3. coba-sekarang.html\n\nNamun, sebenarnya sih aku dah nyaman sama JavaScript dibandingkan bahasa lainnya. Ada juga pernah aku mencoba untuk mengubah ketiga script itu ke dalam bahasa Go, tapi aku kesulitan mengubahnya.\n\n## Tentang generate sitemap\n\n[Sitemap](/sitemap.xml) merupakan file yang sangat penting bagi sebuah website. Karena, dengan file ini, mesin pencari Google akan bisa merayapi website kita. Kok bisa? Karena file sitemap ini berisi kumpulan link di website kita. Maka, Google akan mudah merayapi website kita karena tinggal mengunjungi link-link yang ada di list di dalam file sitemap itu.\n\nMaka, aku pun akhirnya membuat script JavaScript untuk membuat file sitemap secara otomatis berdasarkan semua postingan yang sudah kubuat.\n\n## Tentang Clone JSON\n\nDatabase di blog ini awalnya hanya berupa [satu file](/db.json). Dan tentu saja ukurannya akan terus bertambah seiring dengan jumlah postingan di blog ini. Maka, bukan sesuatu yang efektif jika setiap kali kita membuka suatu halaman di blog ini, menembak satu file tersebut (yang sangat besar size-nya) dan kemudian ketika berganti halaman, menembak file itu lagi. Jadi, aku buat script untuk memecah satu file JSON itu menjadi banyak file JSON sesuai dengan jumlah postingan di blog ini. Sehingga, muat halaman akan lebih cepat karena yang diload hanya JSON yang sesuai dengan halaman yang sedang dibuka (nggak sampai 1 kb JSONnya).\n\n## Tentang callback hell di JavaScript\n\nSalah satu yang menjadi tantangan di pemrograman berbasis bahasa JavaScript adalah tentang callback hell seperti ini:\n\n```javascript\nfetch(\"situs.com\").then(x => x.json()).then(x => {\n console.log(x)\n fetch(\"halo.com\").then(x => x.json()).then(x => {\n  console.log(x)\n })\n})\n```\n\nCallback dalam JavaScript ditampakkan dari fungsi setelah tulisan `.then`. Nah, kalau kita lihat dari kode di atas, maka, callbacknya berada di sebuah fungsi setelah kita menjalankan perintah utama. Jadi, di dalam suatu statement, ada statement berikutnya, dia berbeda dengan bahasa lainnya yang menggunakan prinsip blocking IO:\n\n```python\nbaca = open(\"halo.txt\")\nprint(baca.read())\nbaca.close()\nbuka = open(\"hai.txt\", \"w\")\nbuka.write(\"halo\")\nbuka.close()\n```\n\nKalau di JavaScript, kita menggunakan [async/await](/contoh-async-await) untuk mengatasi permasalahan ini:\n\n```javascript\nhalo = async () => {\n x = await fetch(\"situs.com\")\n x = await x.json()\n console.log(x)\n x = await fetch(\"halo.com\")\n x = await x.json()\n console.log(x)\n}\nhalo()\n```\n\nJadinya lebih enak dimaintenance kan ya? Mirip kayak blocking IO. Itulah kelebihannya kalau menggunakan Javascript karena bahasa ini sering banget di-update. Dan akhirnya, fitur async/await ini membantu banget buat mengatasi permasalahan callback hell yang sudah lama menghantui para programmer JavaScript.\n\nDi script-script yang akan aku bahas di sini juga menggunakan teknik async/await.\n\n## clone-index.js\n\n```javascript\nprocess = require('process')\nfs = require('fs')\nutil = require('util')\nreadFile = util.promisify(fs.readFile)\nwriteFile = util.promisify(fs.writeFile)\ncopyFile = util.promisify(fs.copyFile)\nprocess.chdir('public')\nbuka = async () => {\n\tdata = await readFile('db.json', 'utf8')\n\tdata = JSON.parse(data)\n\tslug = []\n\tjudul = []\n\tdeskripsi = []\n\tfor (x of data.postingan){\n\t\tslug.push(x.slug)\n\t\tjudul.push(x.judul)\n\t\tdeskripsi.push(x.deskripsi)\n\t}\n\tfor (n in slug){\n\t\tbaca = await readFile('index.html', 'utf8')\n\t\tbaca = baca.replace(/(<title>)(.+)(<\\/title>)/g, `$1${judul[n]}$3`)\n\t\tbaca = baca.replace(/(<meta name=\"description\" content=\")(.+)(\">)/g, `$1${deskripsi[n].replace(/\"/g, '\\\\\"')}$3`)\n\t\twriteFile(`${slug[n]}.html`, baca)\n\t}\n\tfs.copyFile('index.html', '404.html', () => {})\n\tfs.copyFile('index.html', 'cari.html', () => {})\n}\nbuka()\n```\n\n## generate-sitemap.js\n\n```javascript\nprocess = require('process')\nfs = require('fs')\nutil = require('util')\nreadFile = util.promisify(fs.readFile)\nwriteFile = util.promisify(fs.writeFile)\nprocess.chdir('public')\nbaca = async () => {\n\tdata = await readFile('db.json', 'utf8')\n\tdata = JSON.parse(data)\n\tslug = []\n\tfor (x of data.postingan){\n\t\tslug.push(x.slug)\n\t}\n\tslug.reverse()\n\tsitemap = '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">'\n\tfor (x of slug){\n\t\tsitemap += `<url><loc>https://blogzen.js.org/${x}</loc></url>`\n\t}\n\tsitemap += '<url><loc>https://blogzen.js.org/</loc></url>'\n\tsitemap += '</urlset>'\n\twriteFile('sitemap.xml', sitemap)\n}\nbaca()\n```\n\n## pecah-json.js\n\n```javascript\nfs = require('fs')\nutil = require('util')\nprocess = require('process')\nwriteFile = util.promisify(fs.writeFile)\nreadFile = util.promisify(fs.readFile)\nprocess.chdir('public')\nbuka = async () => {\n\tdata = await readFile('db.json', 'utf8')\n\tdata = JSON.parse(data)\n\tslug = []\n\tjudul = []\n\tisi = []\n\tdeskripsi = []\n\tfor (x of data.postingan){\n\t\tslug.push(x.slug)\n\t\tjudul.push(x.judul)\n\t\tisi.push(x.isi)\n\t\tdeskripsi.push(x.deskripsi)\n\t}\n\tberanda = []\n\tfor (n in slug){\n\t\tberanda.push({\n\t\t\tslug: slug[n],\n\t\t\tjudul: judul[n],\n\t\t\tdeskripsi: deskripsi[n]\n\t\t})\n\t}\n\twriteFile('beranda.json', JSON.stringify(beranda))\n\tfor (n in slug){\n\t\tyang_diisi = {\n\t\t\tjudul: judul[n],\n\t\t\tdeskripsi: deskripsi[n],\n\t\t\tisi: isi[n]\n\t\t}\n\t\twriteFile(`${slug[n]}.json`, JSON.stringify(yang_diisi))\n\t}\n}\nbuka()\n```\n\n## Script Deploy di Github Action\n\nNggak mungkin kan aku menjalankan ketiga file itu sebelum menguploadnya ke Github. Maka, aku membuat [script](https://github.com/mzaini30/blogzen/blob/master/.github/workflows/blogzen.yml) untuk menjalankan ketiga script di atas secara otomatis _setiap kali aku meng-upload website ini ke Github_:\n\n```yaml\nname: blogzen\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  deploy:\n    runs-on: ubuntu-18.04\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: true\n          \n      - name: Setup Node\n        uses: actions/setup-node@v1\n        with:\n          node-version: \"14.x\"\n\n      - name: Cache dependencies Node\n        uses: actions/cache@v1\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: ${{ runner.os }}-node-\n\n      - name: Install\n        run: npm i\n\n      - name: Clone Index\n        run: node clone-index.js\n\n      - name: Generate sitemap\n        run: node generate-sitemap.js\n\n      - name: Pecah JSON\n        run: node pecah-json.js\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n```\n\nDari script di atas, ada beberapa step yang dijalankan secara otomatis saat Deploy:\n\n1. Check out\n2. Setup Node\n3. Cache dependencies Node\n4. Install\n5. Clone Index\n6. Generate sitemap\n7. Pecah JSON\n8. Deploy\n\nTahapan **checkout** artinya adalah menyalin repositori Github kita ke cachenya Github. Kemudian, **setup Node** untuk meng-install Node di cache tadi. Kemudian, **cache dependencies Node** itu artinya cek apakah dependencies Node yang diperlukan itu sudah terinstall di cache Github atau belum. Kalau pemakaian pertama, biasanya sih dia mendownload dulu berbagai dependencies Node yang diperlukan. Kalau sudah pemakaian ke sekian, dia tinggal mengambil cache dependencies Node aja.\n\nLalu, **install** berarti menjalankan `npm i`. Baru setelah itu kita menjalankan ketiga script yang sudah dibuat (**Clone index, generate sitemap, pecah JSON**). Baru, terakhir adalah **deploy** untuk menyalin folder `public` di cache Github ke dalam repositori Github kita di branch `gh-pages`.",
      "slug": "memperbarui-generator-website-ini",
      "id": 37
    },
    {
      "judul": "Khilafah itu perlu",
      "deskripsi": "Duh. Judulnya",
      "isi": "Mungkin beberapa orang dari kita sudah ngeri duluan ya ngelihat judulnya yang berbau _khilafah_. Ya begitulah. Memang yang namanya stigma itu melekat kuat pada benak setiap kita. Sama pula seperti ketika ada orang membahas tentang komunisme, fasisme, sosialisme, dan berbagai idealisme asing lainnya, yang kita sendiri belum mengenalnya tapi sudah dibuat takut oleh orang-orang.\n\n> Belajar aja nggak papa kan?",
      "slug": "khilafah-itu-perlu",
      "id": 38
    },
    {
      "judul": "Install Deno di Termux",
      "deskripsi": "Akhirnya...",
      "isi": "Kalau di [websitenya Deno](https://deno.land/), dia cuma bisa diinstall pada OS-OS desktop seperti Windows, Mac, dan Linux. Kalau di HP nggak bisa. Akhirnya, aku menemukan cara instalasi Deno dari berdiskusi di Dev:\n\n```bash\npkg install rust\ncargo install deno\n```\n\nTapi sayangnya, pas aku coba, gagal. Kayaknya sih karena arsitektur OSnya yang nggak kompatibel sama yang dibutuhkan oleh Deno. Akhirnya ya nggak jadi install dan aku pakai Node JS aja sudah. Hehehhee...",
      "slug": "install-deno-di-termux",
      "id": 39
    }
  ]
}