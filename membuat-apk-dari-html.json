{"judul":"Membuat APK dari HTML","deskripsi":"Tanpa Android Studio!","isi":"Membuat suatu aplikasi Android adalah impian dari banyak developer. Namun terkadang tujuan mulia itu (membuat aplikasi Android yang bermanfaat) tersandung pada suatu fakta bahwa untuk membuat aplikasi Android dibutuhkan Android Studio atau setidaknya Android SDK yang nanti bisa dikoneksikan dengan React Native maupun [Svelte](/cara-menggunakan-svelte) Native. Tapi, itu semua sama aja. Sama-sama harus menggunakan laptop dengan RAM minimal 4 GB untuk menjalankannya. Nah, kalau misalnya kita hanya mempunyai laptop dengan RAM 2 GB, ya hanya bisa gigit jari karena laptop harus kerja keras untuk sekadar membuat satu aplikasi.\n\nNah, kali ini aku akan memberi tau cara membuat aplikasi Android dengan mudah! Yap, mudah banget karena kamu hanya perlu file HTML untuk membuatnya dan menyiapkan icon aplikasi yang bebas aja, yang penting bentuk iconnya kotak. Yuk lah kita mulai...\n\n## Menyiapkan tools dan bahan\n\nDownload dulu [APK Builder](https://github.com/mzaini30/apk/blob/master/APK%20Builder-com.gmail.heagoo.apkbuilder-1.1.0-11.apk). APK Builder ini adalah tool utama yang kita gunakan untuk convert dari HTML jadi aplikasi Android.\n\nLalu, siapkan juga file HTMLnya. Dikumpulkan dalam satu folder ya...\n\nKemudian, siapkan juga gambar berdimensi kotak, untuk icon aplikasi.\n\n## Membuat aplikasi dari APK Builder\n\nBuka aplikasi APK Builder lalu pilih `New Project`.\n\nLalu tentukan nama aplikasi yang diinginkan. Di sini, aku memilih menggunakan nama `Coba Dulu`. Nah, secara otomatis, nama packagenya menjadi `com.example.cobadulu`.\n\nLalu muncul pilihan template aplikasi, pilih yang `Web Wrapper`.\n\nTerus muncul pertanyaan `Activity Name`, klik `Finish` aja.\n\nSelamat, aplikasimu (masih kosongan tapi) sudah jadi...\n\n## Mengedit kode Java\n\nBuka `src/com/example/cobadulu/MainActivity.java`. Lalu, hapus semua kodenya dan ganti dengan kode berikut ini:\n\n```java\npackage com.example.murajaah;\n\nimport android.annotation.TargetApi;\nimport android.app.Activity;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.view.KeyEvent;\nimport android.webkit.WebResourceRequest;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\n\nimport android.net.Uri;\nimport android.content.Intent;\n\npublic class MainActivity extends Activity {\n\n   \n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n\n        setContentView(R.layout.activity_main);\n\n\n\n        WebView webView = (WebView)findViewById(R.id.web);\n\n         \n         webView.getSettings().setJavaScriptEnabled(true);\n         webView.getSettings().setDomStorageEnabled(true);\n\nwebView.getSettings().setAllowFileAccessFromFileURLs(true); webView.getSettings().setAllowUniversalAccessFromFileURLs(true);\n\nwebView.getSettings().setAllowFileAccess(true); webView.getSettings().setAllowContentAccess(true);\n\n        webView.setWebViewClient(new WebViewClient() {\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, String url) {\n                \n\n            if (url.startsWith(\"http\")){ \n                    Intent i = new Intent(Intent.ACTION_VIEW, Uri.parse(url)); \n                    startActivity(i); \n                   \n            } else {\n                     view.loadUrl(url);\n                     \n            } \n             return true; \n\n\n\n\n            }\n/*\n            @TargetApi(Build.VERSION_CODES.N)\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                return false;\n            }\n*/\n        });\n\n        if (savedInstanceState != null) {\n          webView.restoreState(savedInstanceState);\n         } else {\n            webView.loadUrl(\"file:///android_asset/index.html\");\n        }\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n\n\n        WebView webView = (WebView)findViewById(R.id.web);\n\n\n\n        if (event.getAction() == KeyEvent.ACTION_DOWN) {\n            switch (keyCode) {\n                case KeyEvent.KEYCODE_BACK:\n                    if (webView.canGoBack()) {\n                        webView.goBack();\n                    } else {\n                        finish();\n                    }\n                    return true;\n            }\n\n        }\n        return super.onKeyDown(keyCode, event);\n    }\n\n    @Override\n    protected void onSaveInstanceState(Bundle outState )\n    {\n        WebView webview = (WebView)findViewById(R.id.web);\n\n      super.onSaveInstanceState(outState);\n        webview.saveState(outState);\n    }\n\n    @Override\n    protected void onRestoreInstanceState(Bundle savedInstanceState)\n    {\n        WebView webview = (WebView)findViewById(R.id.web);\n\n        super.onRestoreInstanceState(savedInstanceState);\n        webview.restoreState(savedInstanceState);\n    }\n\n}\n```\n\nNah, perhatikan pada baris pertama kode yang isinya:\n\n```java\npackage com.example.murajaah;\n```\n\nIngat kan kalau nama package kita `com.example.cobadulu`? Nah, ubah bagian itu menjadi:\n\n```java\npackage com.example.cobadulu;\n```\n\n## Mengedit layout\n\nBuka `AndroidManifest.xml`.\n\nPerhatikan pada bagian:\n\n```javascript\nandroid:theme=\"@style/AppTheme\"\n```\n\nPada bagian itu, ubah menjadi:\n\n```javascript\nandroid:theme=\"@android:style/Theme.NoTitleBar\"\n```\n\n## Memasukkan HTML\n\nUntuk memasukkan file HTMLnya, salin folder yang berisi HTML (pastikan ada `index.html` ya...) ke root dari APK Builder kemudian remake foldernya menjadi `assets`.\n\n## Mengubah icon aplikasi\n\nSalin gambar icon aplikasi ke `res/midmap-xhdpi` lalu rename gambarnya menjadi `ic_launcher.jpg` atau `ic_launcher.png`, disesuaikan aja sama ekstensi gambarnya. Kalau PNG ya tetap PNG. Kalau JPG ya tetap JPG.\n\n> Kalau sudah, klik tombol **Build** yang ada di kanan atas."}