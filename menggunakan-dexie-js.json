{"judul":"Menggunakan Dexie JS","deskripsi":"Database offline","isi":"Dexie JS adalah sebuah library JavaScript yang berguna untuk kita membuat database tanpa memerlukan suatu server. Eh, emang bisa? Gimana caranya? Jadi, dengan Dexie JS ini, kita hanya memerlukan browser sebagai tempat penyimpanan databasenya. Dexie menggunakan teknologi IndexedDB, yaitu suatu database manager di browser untuk menyimpan data. Alasan mengapa aku menggunakan API-API dari Dexie dibandingkan API-API dari IndexedDB untuk mengolah database offline adalah karena sintaks-sintaks Dexie yang lebih sederhana. Jadi, kita bisa lebih berfokus ke alur programnya aja.\n\nSebelumnya, aku menjelaskan kode-kode program di bawah ini dengan mengistilahkan table sebuah database pada table yang sesungguhnya. Jadi, ada yang namanya kolom dan baris. Contohnya seperti berikut:\n\n| Nama | Alamat |\n|---|---|\n| Zen | Samarinda |\n| Seseorang | Balikpapan |\n\nDari table di atas, kita bisa lihat bahwa `nama` dan `alamat` adalah nama kolom. Sedangkan `Zen` dan `Samarinda` adalah isi table pada baris yang sama.\n\nOke, langsung aja kita mulai dari instalasi.\n\n## Instalasi\n\nUntuk instalasi, kamu cukup mengincludekan file Dexie ke dalam HTML dengan sintaks sebagai berikut:\n\n```html\n<script src=\"https://unpkg.com/dexie@latest/dist/dexie.min.js\"></script>\n```\n\nTapi, kalau kamu mau download dulu file Dexienya bisa sih. Tinggal kamu buka aja link itu baru disave. Tapi, kalau mau ala-ala Linux atau download dari Terminal ya, kodenya seperti ini yang kamu jalankan di Terminal:\n\n```bash\nwget https://unpkg.com/dexie@latest/dist/dexie.min.js\n```\n\nLalu, setelah itu, includekan Dexie dengan script berikut:\n\n```html\n<script src=\"dexie.min.js\"></script>\n```\n\nItu kalau dengan file Dexienya secara CDN (content delivery network). Tapi, kalau mau coba dengan Node JS, bisa dengan:\n\n```bash\nnpm i dexie\n```\n\nLalu, importnya dengan:\n\n```javascript\nimport Dexie from \"dexie\"\n```\n\nTapi kalau aku sih suka yang dengan CDN daripada import dari Node JS, karena untuk memisahkan antara [framework JavaScript](/cara-menggunakan-svelte) yang menggunakan Node JS dengan script-script eksternal. Tapi kali ini ya. Nggak tau kalau besok-besok berubah pikiran. Hehehhehe....\n\n## Init database\n\nHal pertama yang dilakukan setelah mengincludekan file Dexie adalah menginit databasenya. Nah, pada contoh di bawah ini, aku membuat database bernama `nama database`, lalu database tersebut aku simpan di variabel `db`.\n\n```javascript\ndb = new Dexie(\"nama database\")\ndb.version(1).stores({\n data: \"++id, nama, alamat\"\n})\n```\n\nKemudian, dari database `db`, aku buat tablenya yang bernama `data` dan berisi kolom `id` yang auto increment, `nama`, dan `alamat`. Oh iya, di Dexie ini, semuanya disimpan dalam bentuk string. Jadi, walaupun kamu menyimpannya dalam bentuk number, akan disimpan ke dalam bentuk string.\n\nMengapa hanya membuat satu tabel? Karena Dexie ini memanipulasi fungsi-fungsi pada IndexedDB, maka hanya bisa membuat satu table aja di satu database, soalnya kan ini bukan SQL yang merupakan kaitan antara satu table dengan table lainnya. Tapi nggak msalah sih. Yang penting kan, kita sudah punya fitur database untuk aplikasi offline kita. Itu aja udah Alhamdulillah banget ya.\n\nKemudian, kita akan mempelajari bagaimana caranya **CRUD** di Dexie ini:\n\n## Memasukkan data ke database _(Create)_\n\n```javascript\ndb.data.add({\n nama: \"Zen\",\n alamat: \"Samarinda\"\n}).then(() => console.log(\"success\"))\n```\n\nPada contoh di atas, aku menggunakan `.then(() => console.log(\"success\"))` di akhir dari kodenya. Itu adalah callback yang akan dijalankan jika success.\n\nKalau menggunakan [async/await](/contoh-async-await), kodenya jadi seperti ini:\n\n```javascript\njalankan = async () => {\n x = await db.data.add({\n  nama: \"Zen\",\n  alamat: \"Samarinda\"\n })\n console.log(\"Sukses\")\n}\njalankan()\n```\n\n## Membaca data _(Read)_\n\n```javascript\ndb.data.toArray(x => console.log(x))\n```\n\nContoh dari hasil di atas adalah:\n\n```json\n[\n {\n  \"id\": 1,\n  \"nama\": \"Zen\",\n  \"alamat\": \"Samarinda\"\n },\n {\n  \"id\": 2,\n  \"nama\": \"Siapa\",\n  \"alamat\": \"Tenggarong\"\n },\n]\n```\n\nNah, baru deh hasil JSON di atas kita olah di berbagai framework JavaScript favorit kita.\n\n## Update data _(Update)_\n\n```javascript\ndb.data.where({\n id: 2\n}).modify({\n nama: \"Dia\",\n alamat: \"Samarinda\"\n})\n```\n\nUntuk update data ini, pertama kita sebutkan dulu condition yang membuat suatu baris table di-update. Nah, kalau dari contoh di atas, kita ambil baris table dengan id 2. Itu nggak mesti diisi dengan id. Bisa juga diisi dengan `nama: \"Zen\"` atau dengan nama kolom lainnya.\n\n## Delete data _(Delete)_\n\n```javascript\ndb.data.delete(3)\n```\n\nAngka 3 pada contoh di atas adalah id dari baris data yang mau dihapus. Nah, itu artinya, yang mau dihapus adalah baris data dengan id 3.\n\n## Membalik urutan data\n\nUntuk membalik urutan data, kita cukup menggunakan API `.reverse()`.\n\n```javascript\ndb.data.reverse().toArray(x => console.log(x))\n```"}