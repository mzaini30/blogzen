{"judul":"PNPM sebagai pengganti NPM","deskripsi":"Package manager yang terpusat","isi":"Node JS memiliki sistem manajemen paket yang bernama NPM. Nah, NPM ini akan mendownload paket yang kamu butuhkan beserta dengan paket-paket yang dibutuhkan oleh paket yang kamu butuhkan tadi. Hahahaha...\n\nAnaloginya seperti ini, kamu membutuhkan sebuah paket yang bernama _kue_ (1 MB). Nah, _kue_ ini membutuhkan paket-paket lainnya berupa:\n\n- adonan (1 MB)\n- krim (2 MB)\n- hiasan (1 MB)\n\nTotal dari instalasi paket _kue_ adalah 5 MB.\n\nKemudian, kita akan instalasi paket _kue_ juga di folder lainnya. Otomatis, terdownload lagi 5 MB tadi. Kan boros. Kalau dengan PNPM, semuanya terpusat. Artinya, yang dipasang di project kita cuma yang kita butuhkan aja, yaitu _kue_, sedangkan untuk adonan, krim, dan hiasan, semuanya di root laptop kita. Nah, kalau gini kan jadinya lebih kecil ukuran `node_modules` nya dan lebih hemat internet juga karena yang belum ada di root aja yang didownload. Kalau sudah ada, dia cuma ngelink ke root aja.\n\n## Instalasi\n\nUntuk instalasi, pertama, jalankan script berikut:\n\n```bash\nnpm i -g pnpm\n```\n\nKalau sudah, di-update PNPMnya dengan perintah berikut:\n\n```bash\npnpm add -g pnpm\n```\n\n## Perbandingan perintah\n\nPerintah PNPM sebenarnya kurang lebih aja sih sama NPM. Tabel di bawah ini menunjukkan perbedaanya yang sangat kecil sekali:\n\n| NPM | PNPM |\n|---|---|\n| `npm init -y` | `pnpm init -y` |\n| `npm i` | `pnpm install`|\n| `npm i hello` | `pnpm add hello` |\n| `npm i -g hai` | `pnpm add -g hai` |\n\nNah, kalau kamu mau migrasi dari project yang menggunakan NPM ke penggunaan PNPM, pastikan dulu kamu sudah hapus folder `node_modules`. Setelah itu, jalankan:\n\n```bash\npnpm install\n```"}