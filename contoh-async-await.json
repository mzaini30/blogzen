{"judul":"Contoh async/await","deskripsi":"Mengatasi callback hell","isi":"Javascript terkenal dengan nonblocking IO. Artinya, kalau di Javascript itu, nggak perlu menunggu satu proses sempurna dulu baru lanjut ke proses berikutnya (blocking IO). Jadi, Javascript itu menjalankan segala script di dalamnya itu secara paralel kecuali beberapa sintaks Javascript zaman dulu (sintaks bahari) yang memang secara berurutan, tapi dia nggak berhubungan sama IO. Misalnya aja script di bawah ini:\n\n```javascript\nnama = prompt(\"Siapa namamu?\")\nalert(nama)\n```\n\nKebanyakan, sintaks Javascript itu seperti ini:\n\n```javascript\nfetch('situs.com').then(x => x.json()).then(y => console.log(y))\n```\n\nAtau, untuk lebih memudahkan dalam pemahaman konsepnya, kita buat sintaksnya seperti ini:\n\n```javascript\nfetch('situs.com').then(x => {\n\tx.json()\n}).then(y => {\n\tconsole.log(y)\n})\n```\n\nJadinya, bersarang kan ya?\n\nJadinya, kita nggak bisa langsung mengakses variabel `x` sebelum melalui callback yang pertama. Lalu, nggak bisa mendapatkan nilai dari `y` sebelum melalui callback 1 dan 2.\n\nMaka, solusinya adalah menggunakan async/await. Sintaksnya itu seperti ini jika kita menggunakan contoh di atas tadi:\n\n```javascript\ntes = async () => {\n\tx = await fetch('situs.com')\n\ty = await x.json()\n\tconsole.log(y)\n}\ntes()\n```\n\n## Pembahasan lebih lanjut\n\nSekarang, kita pecah dulu script di atas yang memiliki callback (`.then`) yaitu:\n\n| Sintaks | Hasil |\n|---|---|\n| fetch('situs.com') | x |\n| x.json() | y |\n\nNah, dari tabel di atas, kita sudah dapat bayangan `await` seperti ini:\n\n```javascript\nfetch('situs.com') -> x\nx.json() -> y\n```\n\nKemudian, kita pindah hasil callbacknya ke depan, lalu tambahkan tulisan `await`:\n\n```javascript\nx = await fetch('situs.com')\ny = await x.json()\n```\n\nLalu, tambahkan perintah yang nggak menghasilkan callback:\n\n```javascript\nx = await fetch('situs.com')\ny = await x.json()\nconsole.log(y)\n```\n\nNah, baru di endingnya ditutup dengan fungsi yang `async`:\n\n```javascript\ntes = async () => {\n\tx = await fetch('situs.com')\n\ty = await x.json()\n\tconsole.log(y)\n}\ntes()\n```\n\n## Kalau nggak mau menggunakan async/await\n\nKalau kamu menggunakan Node JS, tentunya ada solusi jika nggak mau menggunakan async/await, yaitu dengan menggunakan library-library serupa yang nggak menggunakan async. Alias `sync`. Nah, tinggal digoogling aja deh apakah ada alternatifnya yang nggak menggunakan async.\n\nMisalnya aja `node-fetch`. Kalau untuk versi sync, bisa menggunakan `sync-fetch`. Tentu saja, dari segi kemampuan, ada perbedaan. Misalnya aja batasannya adalah nggak bisa sending header yang berisi data rahasia. Lalu, untuk menerima inputan user, bisa menggunakan library `prompt` (aku lupa nama library lengkapnya. Tapi, memanggilnya biasanya hanya menggunakan `prompt`)."}